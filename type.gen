dofile("show.lua")

--HERE Enums
Goal = {
	"NewHub", -- open file
	"ThdHub",
	"CfgHub", -- set pid and forward
	"AppHub", -- set pid and forward
	"HubThd", -- lock write forwarded
	"AppThd", -- lock append forwarded
	"ThdThd", -- file change notify
	"HubCfg", -- identify file change
	"ThdErr", -- close and report
	"HubErr", -- report and exit
}
Level = {
	"Stock",
	"First",
	"Assign",
	"Link",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Memory = {
	"Indexz", -- fetch buffer indices
	"Bringupz", -- fetch buffer verticse
	"Imagez", -- facet decorations
	"Uniformz", -- references into arrays
	"Matrixz", -- transformations
	"Trianglez", -- indices of vertices of facet
	"Numericz", -- distances of plane above selected base
	"Vertexz", -- intersection of backlinked planes
	"Basisz", -- base for each dimension
	"Peekz", -- per fragment read
	"Pokez", -- per fragment write
	"Drawz", -- draw range info
	"Instrz", -- little vulkan language
	"Stringz", -- string memory
	"Machinez", -- state machine lines
	"Expressz", -- expression library
	"Kernelz", -- inflight transformations
	"Configurez", -- configure to value
}
Resrc = { -- per variation of BaseState
	"SwapRes",
	"PipeRes",
	"IndexRes",
	"BringupRes",
	"ImageRes",
	"RelateRes",
	"UniformRes",
	"MatrixRes",
	"TriangleRes",
	"NumericRes",
	"VertexRes",
	"BasisRes",
	"DebugRes",
	"PierceRes",
	"DepthRes",
	"ChainRes",
	"DrawRes",
	"BindRes",
}
Micro = { -- what runs on gpu
	"MicroTest", -- Bringup Plan
	"MicroDebug", -- testing microcode
	"MicroPierce", -- fragment feedback
	"MicroDisplay", -- indexed storage
	"MicroDepth", -- fixed point
}
Constant = {
	"MicroCon",
	"MemoryCon",
	"ResrcCon",
}
ResrcLoc = {
	"ResizeLoc",
	"ReformLoc",
	"BeforeLoc", -- like Acquire
	"MiddleLoc", -- like Draw
	"AfterLoc", -- like Present
	-- "Sync5Loc",
	-- "Sync6Loc",
}
Extent = { -- resource initialization done on gpu thread
	"InitExt", -- leave in initial state; don't resize
	"IntExt", -- resize to base,size
	"FormExt", -- reform to format
	"ExtentExt", -- resize to 2d vk extent
	"FillExt", -- record fill value
	"MicroExt", -- resize to micro enum
	"ResrcExt", -- resize to bind enum
	"TrueExt", -- resize once for side effects
	"FalseExt", -- resize every time for side effects
}
Request = {
	"BothReq", -- call resize if changed, and call setup
	"LockReq", -- call setup
	"SizeReq", -- call resize if changed
	"ExclReq", -- call resize and setup if changed
	"OnceReq", -- call resize if changed from initial, and call setup regardless
}
Phase = {
	"IndexPhs",
	"FetchPhs",
	"UniformPhs",
	"StoragePhs",
	"RelatePhs",
	"SamplePhs",
	"PipePhs",
	"FramePhs",
	"SwapPhs",
	"RenderPhs",
}
Render = { -- multiple render pass types, but only one per pipeline type
	"SwapBuf",
	"DebugBuf",
	"PierceBuf",
	"DepthBuf",
}
Packing = { -- VkFormat
	"VecFrm",
	"UvecFrm",
	"UintFrm",
	"SfloatFrm",
	"SrgbFrm",
}
Format = {
	"ImageFrm", -- ExclReq FormExt base(implied:src) size(implied:dst) (undefined to readonly)
	"WonlyFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (readonly to dst)
	"RonlyFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (dst to readonly)
	"PierceFrm", -- ExclReq FormExt base(implied:src) size(implied:dst) (undefined to color)
	"PeekFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (color to src)
	"SourceFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (src to color)
	"PokeFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (color to dst)
	"DestFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (dst to color)
	"RelateFrm", -- ExclReq FormExt base(implied:src) size(implied:dst) (undefined to src)
	"RdwrFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (src to dst)
	"WrrdFrm", -- BothReq FormExt base(implied:src) size(implied:dst) (dst to src)
	"ExtentFrm", -- SizeReq ExtentExt base(width) size(height)
	"FillFrm", -- LockReq FillExt base(value)
	"SizeFrm", -- SizeReq IntExt base size
	"HighFrm", -- BothReq FormExt ptr(raw data) siz(width*height*pixel_size) base(width) size(height)
	"PartFrm", -- BothReq IntExt ptr(raw data) idx(from center) siz(from center) base(from configure) size(from configure)
	"WholeFrm", -- BothReq IntExt ptr(raw data) idx(from center) siz(from center) base(implied: same as idx) size(implied: same as siz)
	"OnceFrm", -- OnceReq IntExt ptr(raw data) idx(from center) siz(from center) base(implied: same as idx) size(implied: same as siz)
	"LockFrm", -- LockReq IntExt ptr(raw data) idx(from center) siz(from center)
	"ResrcFrm", -- LockReq ResrcExt resrc
	"IndexFrm", -- SizeReq MicroExt base(same as resource index)
	"MicroFrm", -- BothReq MicroExt idx(first vertex shader index) siz(number of vertex shader indices) base(which shader set)
	"ConstFrm", -- SizeReq MicroExt base(which shader set)
	"FalseFrm", -- SizeReq FalseExt(always resize)
	"TrueFrm", -- SizeReq TrueExt(resize once)
}
Instr = {
	"QDerIns",  -- advance before push to thread
	"PDerIns", -- advance after fence in thread
	"IDerIns", -- process a particular instance
	"RDeeIns", -- increment read lock in current
	"IDeeIns", -- increment read lock in indexed
	"WDeeIns", -- increment write lock in current
	"RTagIns", -- toggle to get from following selected resource, value associated with given tag
	"UTagIns", -- toggle to use given tag to select following resources
	"WTagIns", -- toggle to use given tag to set value in following resources
	"ITagIns", -- toggle to increment in next selected resource, value associated with given tag
	"JTagIns", -- toggle to initialize in next selected resource, given tag
	"KTagIns", -- set from constant, value associated with given tag
	"CTagIns", -- clear all actions on following done by given tag
	"RIncIns", -- include instructions from Resrc
	"EIncIns", -- include instructions from Memory
	"IIncIns", -- include instructions from Micro
}
Quality = { -- quality of service tags for *TagIns
	"SnumQua", -- sequence number to depend on resources that depend on same original resource
	"RbutQua", -- radio button to use resource only after extracted processed or consumed
	"RuseQua", -- resource use qualifier
}
Toggle = {
	"GetTog",
	"UseTog",
	"SetTog",
	"IncTog",
	"ValTog",
}
Default = {
	"TrivDef",
	"BackDef",
	"GiveDef",
}
Configure = {
	"CenterMem", -- staged field
	"CenterSiz",
	"CenterIdx",
	"CenterSlf",
	"ArgumentInp", -- staged field
	"ArgumentOut",
	"MachineIndex", -- running machine
	"MachineLast", -- reset vector
	"RegisterOpen", -- thread mask
	"RegisterShow", -- commandline mask
	"RegisterPlan", -- testing plan
	"RegisterPoll", -- poll microseconds
	"RegisterExit", -- sortof exit status
	"RegisterPass", -- pass center index
	"RegisterFail", -- fail center index
	"RegisterMask", -- interrupt mask
	"RegisterWake", -- mask of threads
	"RegisterAble", -- interrupts per thread
	"RegisterTime", -- wake time delay
	"RegisterStrq", -- num strings in queue
	"RegisterExpr", -- expression center index
	"RegisterEval", -- center expression index
	"ManipFixed",
	"ManipLeft",
	"ManipBase",
	"ManipAngle",
	"ClickLeft",
	"ClickBase",
	"ClickAngle",
	"FixedLeft",
	"FixedBase",
	"FixedDeep",
	"NormalLeft",
	"NormalBase",
	"NormalDeep",
	"MonitorWidth",
	"MonitorHeight",
	"PhysicalWidth",
	"PhysicalHeight",
	"WindowWidth",
	"WindowHeight",
	"WindowLeft",
	"WindowBase",
	"FocalLength",
	"FocalDepth",
	"ConstantFrames",
	"ConstantImages",
	"ConstantComnds",
}
Transfer = {
	"Stage", -- center fields to configure
	"Tsage", -- configure to center fields
	"Force", -- machine to configure
	"Eval", -- call datxEval
	"Merge", -- combine src to dst
	"Click", -- change manipulator
	"Manip", -- manipulate local
	"Pulse", -- clear to towrite
	"Self", -- clear to written
	"Other", -- maintain as if
	"Comp", -- compose for draw
	"Test", -- time to matrix
	"Bopy", -- memory to memory
	"Copy", -- center to resource
	"Dopy", -- center to center
	"Popy", -- queue to center
	"Qopy", -- center to queue
	"Jump", -- skip if true
	"Goto", -- jump if true
	"Nest", -- nest to level
}
MergeArg = {
	"MergeSrc",
	"MergeDst",
}
ClickArg = {
	"ClickSrc",
	"ClickSrcSub",
	"ClickDst",
	"ClickDstSub",
}
ManipArg = {
	"ManipDst",
	"ManipDstSub",
}
PulseArg = {
	"PulseSrc",
	"PulseSrcSub",
	"PulseDst",
	"PulseDstSub",
}
SelfArg = {
	"SelfSrc",
	"SelfSrcSub",
	"SelfDst",
	"SelfDstSub",
}
OtherArg = {
	"OtherSrc",
	"OtherSrcSub",
	"OtherDst",
	"OtherDstSub",
}
CompArg = {
	"CompSrc",
	"CompSrcSub",
	"CompDst",
	"CompDstSub",
}
TestArg = {
	"TestDst",
	"TestDstSub",
}
BopyArg = {
	"BopySrc",
	"BopySrcSub",
	"BopyDst",
	"BopyDstSub",
	"BopyCount",
}
CopyArg = {
	"CopySrc",
}
DopyArg = {
	"DopySrc",
	"DopyDst",
}
PopyArg = {
	"PopyDst",
}
QopyArg = {
	"QopySrc",
}
Plan = { -- which test to run
	"Bringup",
	-- Bootstrap detects no arguments through RegisterShow, sets RegisterPlan to Bringup.
	-- initPlan starts test and gpu threads, and directs gpu events to test thread.
	-- initTest sets up gpu buffers for fetched tutorial points.
	-- planeTest issues matrix buffer updates and draw requests as fast as possible.
	-- TODO initPlan starts machine and time threads, and direct time events to machine.
	-- TODO planeMachine reads count incremented by planeTime RegisterEval.
	-- TODO planeMachine advances matrix used by planeTest count number of times.
	"Builtin",
	-- Bootstrap detects arguments but no Argument, sets RegisterPlan to Builtin.
	-- TODO similar to Bringup, except use indexed instead of fetched points.
	-- TODO similar to Bringup, except matrix for planeTest copied to gpu by planeMachine.
	-- TODO similar to Bringup, except matrix for planeTest adjusted through
	-- TODO Click Manip Pulse Self Other Manip Click Fixed Normal.
	"Regress",
	-- Bootstrap detects arguments and Argument, sets RegisterPlan to Regress.
	-- TODO no test or time thread, just gpu machine select.
	-- TODO use arguments to load machine, then reproduce Builtin from pipe from lua.
	"Release",
	-- Bootstrap detects Argument only, sets RegisterPlan to Release.
	-- TODO similar to Regress, except pipe and user processed by builtin machine.
}
Action = { -- what input does
	"Indicate", -- move to new piere point
	"Collect", -- identify subpolytope
	"Manipulate", -- apply transformation
	"Refine", -- add boundaries
	"Additive", -- add regions
	"Subtractive", -- remove regions
}
Fixed = { -- how motion interpreted
	"Mouse", -- how many fixed
	"Roller",
	"Slide", -- how changed
	"Rotate",
	"Scale",
	"Cursor", -- what fixed
	"Focal",
	"Ortho",
	"Normal",
}
Thread = { -- separate threads
	"PipeThd",
	"StdioThd",
	"CopyThd",
	"FenceThd",
	"TimeThd",
	"TestThd",
}
Mask = { -- signals between threads
	"FnceMsk", -- fence thread wakeup
	"SizeMsk", -- glfw window resized
	"SelfMsk", -- unexpected self matrix
	"NslfMsk", -- unexpected non-self matrix
	"SlctMsk", -- pipe thread wakeup
	"CnslMsk", -- stdio thread wakeup
	"TimeMsk", -- time thread wakeup
	"PassMsk", -- passing copy callback
	"FailMsk", -- failing copy callback
	"PollMsk", -- every glfw wakeup
}
Emerg = { -- topology state
	"Planes", -- Scalar -- [Plane] -- per boundary
	"Halfs", -- Nested -- Space -- per boundary
	"Coins", -- Listed -- [[Boundary]] -- per vertex
	"Points", -- Scalar -- [Point] -- per vertex
	"Facets", -- Listed -- [[Vertex]] -- per facet vertex triplets
	"Subsets", -- Int -- [Region] -- in context of space
}
Valid = {
	"Toread", -- request for response
	"Toresp", -- response to request
	"Towrite", -- overwrite given element
	"Toadd", -- additively change
	"Tosub", -- subtractively change
}
Stream = { -- commandline process pipe connector
	"Fanout", -- write from readable pipe round robin to one of several pipes
	"Combine", -- write to pipe from expression if any of several expression values change
	"Buffer", -- set expression value from pipe
	"Execute", -- start a filter between the last and next pipe
}
Operate = { -- little language expressions
	"AddOp",
	"SubOp",
	"MulOp",
	"DivOp",
	"RemOp",
	"BitOp",
	"CmpOp",
	"CndOp", -- touring machine
	"FesOp", -- for each set
	"RetOp", -- config from callback
	"SetOp", -- callback with config
	"ValOp", -- value from lookup
	"SavOp", -- value for lookup
	"RexOp", -- regex sugar
	"IrxOp", -- irrex sugar
	"GetOp", -- string from callback
	"PutOp", -- callback with string
	"FldOp", -- fields to struct
	"ExtOp", -- fields from struct
	"ImmOp", -- built in value
	"IntOp", -- ImmOp sugar
	"StrOp", -- ImmOp sugar
}
Compare = { -- little language comparisons
	-- Less Equal More
	-- Open Closed
	"LOCmp",
	"LCCmp",
	"EOCmp",
	"ECCmp",
	"MOCmp",
	"MCCmp",
	"ReCmp", -- regular expression
	"IrCmp", -- irregular expression
}
Bitwise = { -- little language bitwise
	"AndBit",
	"OrBit",
	"XorBit",
	"NandBit",
	"NorBit",
	"EquBit",
	"ShiftBit",
	"PackBit",
}
Order = { -- ireg expression operators
	"ChrOrd",
	"PreOrd",
	"PostOrd",
	"PermOrd",
	"ForkOrd",
	"BeginOrd",
}
Program = { -- process type in standard commandline argument
	"Filez", -- Persist
	"Holez", -- Persist
	"Linez", -- Event
	"Planez", -- Center
	"Spacez", -- Change
	"Sidez", -- Persist gui
	"Framez", -- video little language
	"Sharez", -- Valve
}
Tag = { -- type of data piped between processes
	"Persistz", -- file hole side
	"Eventz", -- line
	"Centerz", -- plane
	"Changez", -- space
	-- video little language -- frame
	"Valvez", -- share
}
--HERE Constants
ResrcStride = {
	{"Resrc","BringupRes","Int","48"},
}
ResrcOffset = {
	{"Resrc","BringupRes","Int","0","Int","0"},
	{"Resrc","BringupRes","Int","1","Int","16"},
	{"Resrc","BringupRes","Int","2","Int","32"},
}
ResrcFormat = {
	{"Resrc","BringupRes","Int","0","Packing","VecFrm"},
	{"Resrc","BringupRes","Int","1","Packing","VecFrm"},
	{"Resrc","BringupRes","Int","2","Packing","UvecFrm"},
}
ResrcElement = {
	{"Resrc","BringupRes","Int","0","Int","4"},
	{"Resrc","BringupRes","Int","1","Int","4"},
	{"Resrc","BringupRes","Int","2","Int","4"},
}
ResrcPacking = {
	{"Resrc","SwapRes","Packing","SrgbFrm"},
	{"Resrc","DebugRes","Packing","SfloatFrm"},
	{"Resrc","PierceRes","Packing","UintFrm"},
	{"Resrc","DepthRes","Packing","SfloatFrm"},
}
ResrcPhase = {
	{"Resrc","IndexRes","Phase","IndexPhs"},
	{"Resrc","BringupRes","Phase","FetchPhs"},
	{"Resrc","UniformRes","Phase","UniformPhs"},
	{"Resrc","MatrixRes","Phase","UniformPhs"},
	{"Resrc","BasisRes","Phase","StoragePhs"},
	{"Resrc","TriangleRes","Phase","StoragePhs"},
	{"Resrc","NumericRes","Phase","StoragePhs"},
	{"Resrc","VertexRes","Phase","StoragePhs"},
	{"Resrc","RelateRes","Phase","RelatePhs"},
	{"Resrc","ImageRes","Phase","SamplePhs"},
	{"Resrc","DebugRes","Phase","RenderPhs"},
	{"Resrc","PierceRes","Phase","RenderPhs"},
	{"Resrc","DepthRes","Phase","RenderPhs"},
	{"Resrc","SwapRes","Phase","SwapPhs"},
	{"Resrc","ChainRes","Phase","FramePhs"},
	{"Resrc","PipeRes","Phase","PipePhs"},
}
ResrcBinding = {
	{"Resrc","UniformRes","Int","0"},
	{"Resrc","MatrixRes","Int","1"},
	{"Resrc","BasisRes","Int","2"},
	{"Resrc","TriangleRes","Int","3"},
	{"Resrc","NumericRes","Int","4"},
	{"Resrc","VertexRes","Int","5"},
	{"Resrc","RelateRes","Int","6"},
	{"Resrc","ImageRes","Int","7"},
}
VertexFile = {
	{"Micro","MicroTest","Str","vertexTestG"},
	{"Micro","MicroDebug","Str","vertexDebugG"},
	{"Micro","MicroDisplay","Str","vertexDisplayG"},
	{"Micro","MicroPierce","Str","vertexPierceG"},
	{"Micro","MicroDepth","Str","vertexDepthG"},
}
FragmentFile = {
	{"Micro","MicroTest","Str","fragmentTestG"},
	{"Micro","MicroDebug","Str","fragmentDebugG"},
	{"Micro","MicroDisplay","Str","fragmentDisplayG"},
	{"Micro","MicroPierce","Str","fragmentPierceG"},
	{"Micro","MicroDepth","Str","fragmentDepthG"},
}
MemoryIns = {
	-- n==0: departures from PDerIns,Resrcs,Memorys,Micros,MiddleLoc,WholeFrm,Qualitys
	-- n>0: departures from n-1
	{"Memory","Indexz","Int","0","Resrc","IndexRes"},
	{"Memory","Indexz","Int","0"},
	{"Memory","Indexz","Int","0","Default","TrivDef"},
	{"Memory","Indexz","Int","0","Int","0"},
	{"Memory","Bringupz","Int","0","Resrc","BringupRes"},
	{"%(mem={\"Imagez\",\"Pokez\",\"Peekz\"};"..
	"res={\"ImageRes\",\"DebugRes\",\"DebugRes\"}"..
	"siz={\"ExtentFrm\",\"ExtentFrm\",\"ExtentFrm\"}"..
	"ref={\"ImageFrm\",\"PierceFrm\",\"PierceFrm\"}"..
	"bef={\"WonlyFrm\",\"PokeFrm\",\"PeekFrm\"}"..
	"mid={\"HighFrm\",\"HighFrm\",\"HighFrm\"}"..
	"aft={\"RonlyFrm\",\"DestFrm\",\"SourceFrm\"}"..
	"function fnc (lst) for i,v in ipairs(lst) do if i ~= #mem then coroutine.yield(v) else return v end end end;"..
	"return \"Memory\")","%(return fnc(mem))","Int","0","Instr","IDerIns"},
	{"Memory","%(return fnc(mem))","Int","0","Resrc","%(return fnc(res))"},
	{"Memory","%(return fnc(mem))","Int","0","Memory","Memorys"},
	{"Memory","%(return fnc(mem))","Int","0","Micro","Micros"},
	{"Memory","%(return fnc(mem))","Int","0","ResrcLoc","ResizeLoc"},
	{"Memory","%(return fnc(mem))","Int","0","Format","%(return fnc(siz))"},
	{"Memory","%(return fnc(mem))","Int","0","Quality","Qualitys"},
	{"Memory","%(return fnc(mem))","Int","1","ResrcLoc","ReformLoc"},
	{"Memory","%(return fnc(mem))","Int","1","Format","%(return fnc(ref))"},
	{"Memory","%(return fnc(mem))","Int","2","ResrcLoc","BeforeLoc"},
	{"Memory","%(return fnc(mem))","Int","2","Format","%(return fnc(bef))"},
	{"Memory","%(return fnc(mem))","Int","3","ResrcLoc","MiddleLoc"},
	{"Memory","%(return fnc(mem))","Int","3","Format","%(return fnc(mid))"},
	{"Memory","%(return fnc(mem))","Int","4","ResrcLoc","AfterLoc"},
	{"Memory","%(return fnc(mem))","Int","4","Format","%(return fnc(aft))"},
	{"Memory","Uniformz","Int","0","Resrc","UniformRes"},
	{"Memory","Matrixz","Int","0","Resrc","MatrixRes"},
	{"Memory","Matrixz","Int","0","Format","LockFrm"},
	{"Memory","Trianglez","Int","0","Resrc","TriangleRes"},
	{"Memory","Numericz","Int","0","Resrc","NumericRes"},
	{"Memory","Vertexz","Int","0","Resrc","VertexRes"},
	{"Memory","Basisz","Int","0","Resrc","BasisRes"},
}
MemoryAlt = {
	{"Memory","Matrixz","Int","0","Instr","PDerIns"},
	{"Memory","Matrixz","Int","0","Resrc","MatrixRes"},
	{"Memory","Matrixz","Int","0","Memory","Memorys"},
	{"Memory","Matrixz","Int","0","Micro","Micros"},
	{"Memory","Matrixz","Int","0","ResrcLoc","MiddleLoc"},
	{"Memory","Matrixz","Int","0","Format","WholeFrm"},
	{"Memory","Matrixz","Int","0","Quality","Qualitys"},
	{"Memory","Matrixz","Int","0"},
	{"Memory","Matrixz","Int","0","Default","TrivDef"},
	{"Memory","Matrixz","Int","0","Int","0"},
}
ResrcIns = {
	-- n==0: departures from QDerIns,Resrcs,Memorys,Micros,ResizeLoc,SizeFrm,Qualitys
	-- n>0: departures from n-1
	{"Resrc","SwapRes","Int","0","Instr","PDerIns"},
	 {"Resrc","SwapRes","Int","0","Resrc","SwapRes"},
	 {"Resrc","SwapRes","Int","0","Memory","Memorys"},
	 {"Resrc","SwapRes","Int","0","Micro","Micros"},
	 {"Resrc","SwapRes","Int","0","ResrcLoc","ResizeLoc"},
	 {"Resrc","SwapRes","Int","0","Format","FalseFrm"},
	 {"Resrc","SwapRes","Int","0","Quality","Qualitys"},
	{"Resrc","PipeRes","Int","0","Instr","IDerIns"},
	 {"Resrc","PipeRes","Int","0","Resrc","PipeRes"},
	 {"Resrc","PipeRes","Int","0","Format","IndexFrm"},
	 {"Resrc","PipeRes","Int","2"},
	 {"Resrc","PipeRes","Int","0","Default","GiveDef"},
	 {"Resrc","PipeRes","Int","0","Int","0"}, -- IDerIns
	 {"Resrc","PipeRes","Int","1","Default","BackDef"},
	 {"Resrc","PipeRes","Int","1","Int","0"}, -- Micro
	{"Resrc","IndexRes","Int","0","Resrc","IndexRes"},
	{"Resrc","BringupRes","Int","0","Resrc","BringupRes"},
	{"Resrc","ImageRes","Int","0","Resrc","ImageRes"},
--	PierceRes: (resize)->{initial}->read->fill->read
	{"Resrc","PierceRes","Int","0","Instr","PDerIns"},
	 {"Resrc","PierceRes","Int","0","Resrc","PierceRes"},
	 {"Resrc","PierceRes","Int","0","Format","ExtentFrm"},
	{"Resrc","PierceRes","Int","1","ResrcLoc","ReformLoc"},
	 {"Resrc","PierceRes","Int","1","Format","RelateFrm"},
	{"Resrc","PierceRes","Int","2","ResrcLoc","BeforeLoc"},
	 {"Resrc","PierceRes","Int","2","Format","RdwrFrm"},
	{"Resrc","PierceRes","Int","3","ResrcLoc","MiddleLoc"},
	 {"Resrc","PierceRes","Int","3","Format","FillFrm"},
	{"Resrc","PierceRes","Int","4","ResrcLoc","AfterLoc"},
	 {"Resrc","PierceRes","Int","4","Format","WrrdFrm"},
-- RelateRes: (resize)->{initial}->shadow->write->shadow
	{"Resrc","RelateRes","Int","0","Instr","PDerIns"},
	 {"Resrc","RelateRes","Int","0","Resrc","RelateRes"},
	 {"Resrc","RelateRes","Int","0","Format","ExtentFrm"},
	{"Resrc","PierceRes","Int","1","ResrcLoc","ReformLoc"},
	 {"Resrc","PierceRes","Int","1","Format","ImageFrm"},
	{"Resrc","PierceRes","Int","2","ResrcLoc","BeforeLoc"},
	 {"Resrc","PierceRes","Int","2","Format","WonlyFrm"},
	{"Resrc","PierceRes","Int","3","ResrcLoc","MiddleLoc"},
	 {"Resrc","PierceRes","Int","3","Format","HighFrm"},
	{"Resrc","PierceRes","Int","4","ResrcLoc","AfterLoc"},
	 {"Resrc","PierceRes","Int","4","Format","RonlyFrm"},
	 {"Resrc","PierceRes","Int","3"},
	 {"Resrc","PierceRes","Int","0","Int","0"}, -- IDerIns
	 {"Resrc","PierceRes","Int","1","Int","0"}, -- WindowWidth
	 {"Resrc","PierceRes","Int","2","Int","0"}, -- WindowHeight
	{"Resrc","UniformRes","Int","0","Resrc","UniformRes"},
	{"Resrc","MatrixRes","Int","0","Resrc","MatrixRes"},
	{"Resrc","TriangleRes","Int","0","Resrc","TriangleRes"},
	{"Resrc","NumericRes","Int","0","Resrc","NumericRes"},
	{"Resrc","VertexRes","Int","0","Resrc","VertexRes"},
	{"Resrc","BasisRes","Int","0","Resrc","BasisRes"},
	{"Resrc","DebugRes","Int","0","Resrc","DebugRes"},
	{"Resrc","ChainRes","Int","0","Resrc","ChainRes"},
	{"Resrc","ChainRes","Int","0","Format","TrueFrm"},
	{"Resrc","DrawRes","Int","0","Resrc","DrawRes"},
	{"Resrc","DrawRes","Int","0","Format","ConstFrm"},
}
ResrcAlt = {
	{"Resrc","SwapRes","Int","0","Instr","PDerIns"},
	 {"Resrc","SwapRes","Int","0","Resrc","SwapRes"},
	 {"Resrc","SwapRes","Int","0","Memory","Memorys"},
	 {"Resrc","SwapRes","Int","0","Micro","Micros"},
	 {"Resrc","SwapRes","Int","0","ResrcLoc","ResizeLoc"},
	 {"Resrc","SwapRes","Int","0","Format","FalseFrm"},
	 {"Resrc","SwapRes","Int","0","Quality","Qualitys"},
	 {"Resrc","SwapRes","Int","0"},
	 {"Resrc","SwapRes","Int","0","Default","TrivDef"},
	 {"Resrc","SwapRes","Int","0","Int","0"},
}
MicroIns = {
	-- n==0: departures from QDerIns,Resrcs,Memorys,Micros,ResizeLoc,SizeFrm,Qualitys
	-- n>0: departures from n-1
	-- TODO \"RelateRes\",
	{"%(dee = {\"SwapRes\",\"ChainRes\",\"UniformRes\",\"MatrixRes\",\"ImageRes\",\"IndexRes\",\"BringupRes\"}\
	mic = {\"MicroTest\",\"MicroDisplay\"}\
	deb = {\"UniformRes\",\"MatrixRes\",\"ImageRes\",\"IndexRes\",\"BringupRes\"}\
	mib = {\"MicroDebug\",\"MicroPierce\"}\
	web = {\"DebugRes\",\"PierceRes\"}\
	function fnc (lst) for i,v in ipairs(lst) do if i ~= #lst then coroutine.yield(v) else return v end end end\
	function gnc (lst,oth) for i,v in ipairs(lst) do for j,w in ipairs(oth) do if i ~= #lst or j~= #oth then coroutine.yield(v) else return v end end end end\
	function hnc (lst,num) for i,v in ipairs(lst) do if i ~= #lst then coroutine.yield(i+num) else return i+num end end end\
	return \"Micro\")","%(return gnc(mic,dee))","Int","0","Instr","QDerIns"},
		{"Micro","%(return gnc(mic,dee))","Int","0","Resrc","ChainRes"},
		{"Micro","%(return gnc(mic,dee))","Int","0","Memory","Memorys"},
		{"Micro","%(return gnc(mic,dee))","Int","0","Micro","Micros"},
		{"Micro","%(return gnc(mic,dee))","Int","0","ResrcLoc","BeforeLoc"},
		{"Micro","%(return gnc(mic,dee))","Int","0","Format","MicroFrm"},
		{"Micro","%(return gnc(mic,dee))","Int","0","Quality","Qualitys"},
	{"Micro","%(return gnc(mic,dee))","Int","1","Instr","RDeeIns"},
		{"Micro","%(return gnc(mic,dee))","Int","1","Resrc","SwapRes"},
	{"Micro","%(return gnc(mic,dee))","Int","2","Instr","QDerIns"},
		{"Micro","%(return gnc(mic,dee))","Int","2","Resrc","DrawRes"},
		{"Micro","%(return gnc(mic,dee))","Int","2","ResrcLoc","MiddleLoc"},
	{"Micro","%(return gnc(mic,dee))","Int","3","Instr","RDeeIns"},
		{"Micro","%(return gnc(mic,dee))","Int","%(return hnc(dee,2))","Resrc","%(return fnc(dee))"},
	{"Micro","%(return gnc(mic,dee))","Int","%(return 3+#dee)","Instr","IDeeIns"},
		{"Micro","%(return gnc(mic,dee))","Int","%(return 3+#dee)","Resrc","PipeRes"},
	{"Micro","%(return gnc(mic,dee))","Int","%(return 4+#dee)","Instr","QDerIns"},
		{"Micro","%(return gnc(mic,dee))","Int","%(return 4+#dee)","Resrc","ChainRes"},
		{"Micro","%(return gnc(mic,dee))","Int","%(return 4+#dee)","ResrcLoc","AfterLoc"},
	{"Micro","%(return gnc(mic,dee))","Int","%(return 5+#dee)","Instr","RDeeIns"},
		{"Micro","%(return gnc(mic,dee))","Int","%(return 5+#dee)","Resrc","SwapRes"},
	{"Micro","%(return gnc(mic,dee))","Int","%(return 6+#dee)","Instr","IDeeIns"},
		{"Micro","%(return gnc(mic,dee))","Int","%(return 6+#dee)","Resrc","PipeRes"},
	{"Micro","MicroTest","Int","0"}, -- TODO number of defaults
	{"Micro","MicroTest","Int","0","Default","TrivDef"}, -- TODO how to interpret default
	{"Micro","MicroTest","Int","0","Int","0"}, -- TODO defaults
	{"Micro","%(return fnc(mib))","Int","0","Instr","QDerIns"},
		{"Micro","%(return fnc(mib))","Int","0","Resrc","DrawRes"},
		{"Micro","%(return fnc(mib))","Int","0","ResrcLoc","MiddleLoc"},
		{"Micro","%(return fnc(mib))","Int","0","Format","MicroFrm"},
	{"Micro","%(return fnc(mib))","Int","1","Instr","WDeeIns"},
		{"Micro","%(return fnc(mib))","Int","1","Resrc","%(return fnc(web))"},
	{"Micro","%(return fnc(mib))","Int","2","Instr","RDeeIns"},
		{"Micro","%(return gnc(mib,deb))","Int","%(return hnc(deb,1))","Resrc","%(return fnc(deb))"},
	{"Micro","%(return fnc(mib))","Int","%(return 2+#deb)","Instr","IDeeIns"},
		{"Micro","%(return fnc(mib))","Int","%(return 2+#deb)","Resrc","PipeRes"},
}
MicroAlt = {
	{"Micro","MicroTest","Int","0","Instr","QDerIns"},
		{"Micro","MicroTest","Int","0","Resrc","ChainRes"},
		{"Micro","MicroTest","Int","0","Memory","Memorys"},
		{"Micro","MicroTest","Int","0","Micro","Micros"},
		{"Micro","MicroTest","Int","0","ResrcLoc","BeforeLoc"},
		{"Micro","MicroTest","Int","0","Format","MicroFrm"},
		{"Micro","MicroTest","Int","0","Quality","Qualitys"},
		{"Micro","MicroTest","Int","0"},
		{"Micro","MicroTest","Int","0","Default","TrivDef"},
		{"Micro","MicroTest","Int","0","Int","0"},
}
-- i<Memorys centerPull(i)->mem==i
-- i>=Memorys&&i<Memorys+4 scratchpad as src or dest of Transfer
-- i>Memorys+4 Machine arrays as callable procedures
-- i==Machinez is main machine that waits for bit CopyThd in RegisterWake
-- TODO in Builtin, have planeDebug use planeMatrix depending on commandline.
-- TODO in Regress, use Center pipe instead of planeTest.
-- TODO in Release, use mouse and roller instead of Center spoofs.
Bootstrap = {
	{"Int","0","Str","Indexz(siz:0idx:0slf:0)"},
	-- also used for centerCheck in main loop of planeTest
	{"Int","1","Str","Bringupz(siz:0idx:0slf:0)"},
	{"Int","2","Str","Imagez(siz:0idx:0slf:0)"},
	{"Int","3","Str","Uniformz(siz:0idx:0slf:0)"},
	{"Int","4","Str","Matrixz(siz:0idx:0slf:0)"},
	{"Int","5","Str","Trianglez(siz:0idx:0slf:0)"},
	{"Int","6","Str","Numericz(siz:0idx:0slf:0)"},
	{"Int","7","Str","Vertexz(siz:0idx:0slf:0)"},
	{"Int","8","Str","Basisz(siz:0idx:0slf:0)"},
	{"Int","9","Str","Peekz(siz:0idx:0slf:0)"},
	{"Int","10","Str","Pokez(siz:0idx:0slf:0)"},
	{"Int","11","Str","Drawz(siz:0idx:0slf:0)"},
	{"Int","12","Str","Instrz(siz:0idx:0slf:0)"},
	{"Int","13","Str","Stringz(siz:0idx:0slf:0)"},
	{"Int","14","Str","Machinez(siz:1idx:0slf:0mch[0]:Goto(exp[0]:IntOp(0)))"},
	-- wait for count nonzero, update matrix and decrement count, repeat from wait
	{"Int","15","Str","Expressz(siz:1idx:0slf:0exp[0]:FesOp(num:2msk[0]:IntOp(3)"..
		-- continue timer and increment count
		"mux[0]:SetOp(cgs:Configure(RegisterTime)set[0]:BitOp(bit:ShiftBitopb[0]:IntOp(750)opb[1]:IntOp(8)))"..
		"mux[1]:SavOp(kys:Str(count)sav[0]:AddOp(opa[0]:ValOp(key:Str(count))opa[1]:IntOp(1)))))"},
	{"Int","16","Str","Kernelz(siz:0idx:0slf:0)"}, -- for plans after Bringup
	{"Int","17","Str","Configurez(siz:0idx:0slf:0)"},
	{"Int","18","Str","Indexz(siz:0idx:0slf:0)"}, -- scratch
	{"Int","19","Str","Indexz(siz:0idx:0slf:0)"}, -- scratch
	{"Int","20","Str","Indexz(siz:0idx:0slf:0)"}, -- scratch
	{"Int","21","Str","Indexz(siz:0idx:0slf:0)"}, -- scratch
	{"Int","22","Str","SavOp(kys:Str(count)sav[0]:IntOp(0))"}, -- initialize count
	{"Int","23","Str","Force(num:1cfg[0]:RegisterPlanval[0]:CndOp(siz:5"..
		"cnd[0]:CmpOp(cmp:EOCmpopc[0]:RetOp(RegisterShow)opc[1]:IntOp(0))".. -- (RegisterShow != 0 ? 1 : 0)
		"cnd[1]:CmpOp(cmp:EOCmpopc[0]:AddOp("..
			"opa[0]:CmpOp(cmp:ECCmpopc[0]:BitOp(bit:AndBitopb[0]:RetOp(RegisterShow)opb[1]:IntOp(1))opc[1]:IntOp(0))"..
			"opa[1]:CmpOp(cmp:EOCmpopc[0]:BitOp(bit:AndBitopb[0]:RetOp(RegisterShow)opb[1]:IntOp(30))opc[1]:IntOp(0))"..
			")opc[1]:IntOp(2))".. -- ((((RegisterShow & 1) == 0) + ((RegisterShow & 30) != 0)) != 2 ? 1 : 0)
		"cnd[2]:CmpOp(cmp:EOCmpopc[0]:AddOp("..
			"opa[0]:CmpOp(cmp:EOCmpopc[0]:BitOp(bit:AndBitopb[0]:RetOp(RegisterShow)opb[1]:IntOp(1))opc[1]:IntOp(0))"..
			"opa[1]:CmpOp(cmp:EOCmpopc[0]:BitOp(bit:AndBitopb[0]:RetOp(RegisterShow)opb[1]:IntOp(30))opc[1]:IntOp(0))"..
			")opc[1]:IntOp(2))".. -- ((((RegisterShow & 1) != 0) + ((RegisterShow & 30) != 0)) != 2 ? 1 : 0)
		"cnd[3]:CmpOp(cmp:EOCmpopc[0]:RetOp(RegisterShow)opc[1]:IntOp(1))".. -- (RegisterShow != 1 ? 1 : 0)
		"cnd[4]:IntOp(0)"..
		"lst[0]:IntOp(%(return castPlan(\"Bringup\")))"..
		"lst[1]:IntOp(%(return castPlan(\"Builtin\")))"..
		"lst[2]:IntOp(%(return castPlan(\"Regress\")))"..
		"lst[3]:IntOp(%(return castPlan(\"Release\")))"..
		"lst[4]:IntOp(-1)))"},
}
Execname = {
	{"Program","Filez","Str","./file"},
	{"Program","Holez","Str","./hole"},
	{"Program","Linez","Str","./line"},
	{"Program","Planez","Str","./plane"},
	{"Program","Spacez","Str","./space"},
	{"Program","Sidez","Str","./side"},
	{"Program","Framez","Str","./frame"},
	{"Program","Sharez","Str","./share"},
}
--HERE Structs
Persist = { -- for file hole side
	{"act","Goal",{},{}},
	{"idx","Int",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true
	}},{}}, -- identifier for file
	{"loc","New",{["act"]={
		["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true,
		["HubCfg"]=true
	}},{}}, -- location in file
	{"pid","New",{["act"]={
		["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true
	}},{}}, -- process id for fifo
	{"slf","Int",{["act"]={
		["HubCfg"]=true
	}},{}}, -- whether process id is self
	{"str","Str",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true,["HubErr"]=true
	}},{}}, -- file or field
}
Term0 = {
	{"cff","Num",{},{}},
}
Term1 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{1}},
}
Term2 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{2}},
}
Term3 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{3}},
}
Nomial = {
	{"num0","Int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","Int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","Int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","Int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = { -- for line process
	{"tag","Level",{},{}},
	{"idx","Int",{},{}},
	{"oth","Int",{},{}},
	{"key","Num",{},{}},
	{"val","Num",{},{}},
	{"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Link"]=true}},{}},
	{"siz","Int",{["tag"]={["Wave"]=true}},{}},
	{"buf","Num",{["tag"]={["Wave"]=true}},"siz"},
	{"num","Int",{["tag"]={["Timer"]=true}},{}},
	{"tot","Int",{["tag"]={["Timer"]=true}},{}},
	{"ids","Int",{["tag"]={["Timer"]=true}},"num"},
	{"req","Int",{["tag"]={["Timer"]=true}},"num"},
	{"rsp","Num",{["tag"]={["Timer"]=true}},"tot"},
	{"wrp","Num",{["tag"]={["Audio"]=true}},{}},
	{"gap","Int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","Int",{["tag"]={["Audio"]=true}},{}},
	{"len","Int",{["tag"]={["Audio"]=true}},{}},
	{"enb","Int",{["tag"]={["Audio"]=true}},{}},
}
Irrex = { -- permutation of permutations
	-- prm of zero is always valid
	-- advance top level prm first, otherwise
	-- reset top level and advence next level down
	{"str","Str",{},{}}, -- stateful evaluation
	{"prm","Int",{},{}}, -- stateful evaluation
	{"msk","Int",{},{}}, -- stateful evaluation
	{"ord","Order",{},{}}, -- type of comparison
	{"siz","Int",{},{}}, -- zero for ChrOrd
	{"sub","Irrex",{},"siz"},
}
Express = {
	{"opr","Operate",{},""},
	{"opa","Express",{["opr"]={["AddOp"]=true,["SubOp"]=true,["MulOp"]=true,["DivOp"]=true,["RemOp"]=true}},2},
	{"bit","Bitwise",{["opr"]={["BitOp"]=true}},{}},
	{"opb","Express",{["opr"]={["BitOp"]=true}},2},
	{"cmp","Compare",{["opr"]={["CmpOp"]=true}},{}},
	{"opc","Express",{["opr"]={["CmpOp"]=true}},2},
	{"siz","Int",{["opr"]={["CndOp"]=true}},{}},
	{"cnd","Express",{["opr"]={["CndOp"]=true}},"siz"},
	{"lst","Express",{["opr"]={["CndOp"]=true}},"siz"},
	{"num","Int",{["opr"]={["FesOp"]=true}},{}},
	{"msk","Express",{["opr"]={["FesOp"]=true}},1},
	{"mux","Express",{["opr"]={["FesOp"]=true}},"num"},
	{"cfg","Configure",{["opr"]={["RetOp"]=true}},{}},
	{"cgs","Configure",{["opr"]={["SetOp"]=true}},{}},
	{"set","Express",{["opr"]={["SetOp"]=true}},1},
	{"key","Str",{["opr"]={["ValOp"]=true}},{}},
	{"kys","Str",{["opr"]={["SavOp"]=true}},{}},
	{"sav","Express",{["opr"]={["SavOp"]=true}},1},
	{"rex","Str",{["opr"]={["RexOp"]=true}},{}},
	{"irx","Str",{["opr"]={["IrxOp"]=true}},{}},
	{"put","Express",{["opr"]={["PutOp"]=true}},1},
	{"fld","Express",{["opr"]={["FldOp"]=true}},4},
	{"ext","Express",{["opr"]={["ExtOp"]=true}},3},
	{"val","Str",{["opr"]={["ImmOp"]=true}},{}},
	{"ivl","Int",{["opr"]={["IntOp"]=true}},{}},
	{"svl","Str",{["opr"]={["StrOp"]=true}},{}},
}
Machine = {
	{"xfr","Transfer",{},""},
	{"siz","Int",{["xfr"]={["Stage"]=true,["Tsage"]=true}},{}},
	{"sav","Configure",{["xfr"]={["Stage"]=true,["Tsage"]=true}},"siz"},
	{"idx","Express",{["xfr"]={["Stage"]=true,["Tsage"]=true}},1},
	{"num","Int",{["xfr"]={["Force"]=true}},{}},
	{"cfg","Configure",{["xfr"]={["Force"]=true}},"num"},
	{"val","Express",{["xfr"]={["Force"]=true}},"num"},
	{"fnc","Express",{["xfr"]={["Eval"]=true}},1},
	{"res","Express",{["xfr"]={["Eval"]=true}},1},
	{"sig","Int",{["xfr"]={["Manip"]=true,["Pulse"]=true,["Self"]=true,["Other"]=true,["Click"]=true,["Comp"]=true,
		["Test"]=true,["Bopy"]=true,["Copy"]=true,["Dopy"]=true,["Popy"]=true,["Qopy"]=true}},{}},
	{"arg","Express",{["xfr"]={["Manip"]=true,["Pulse"]=true,["Self"]=true,["Other"]=true,["Click"]=true,["Comp"]=true,
		["Test"]=true,["Bopy"]=true,["Copy"]=true,["Dopy"]=true,["Popy"]=true,["Qopy"]=true}},"sig"},
	{"exp","Express",{["xfr"]={["Jump"]=true,["Goto"]=true}},1},
	{"lvl","Int",{["xfr"]={["Nest"]=true}},{}},
}
Uniform = {
	{"all","Int32",{},{}}, -- which subject to use
	{"one","Int32",{},{}}, -- which element to use
	{"idx","Int32",{},{}}, -- which plane to manipulate
	{"use","Int32",{},{}}, -- which basis to use

	{"tri","Int32",{},{}}, -- base of triangles
	{"num","Int32",{},{}}, -- base of numerics
	{"vtx","Int32",{},{}}, -- base of vertices
	{"mat","Int32",{},{}}, -- base of matrices

	{"bas","Int32",{},{}}, -- base of basises
	{"mod","Int32",{},{}}, -- fetch/storage vertices/planes
	{"wid","Int32",{},{}}, -- width of image
	{"hei","Int32",{},{}}, -- height of image
}
Triangle = {
	{"vtx","Int32",{},{4}}, -- points of triangle
	{"num","Int32",{},{}}, -- plane of points
	{"pol","Int32",{},{}}, -- polytope triangle is in
	{"tex","Int32",{},{}}, -- texture selector
	{"rot","Int32",{},{}}, -- texture rotation
}
Numeric = {
	{"vec","Old",{},{4}}, -- distances above basis
	{"bas","Int32",{},{}}, -- basis selector
	{"pad","Int32",{},{3}},
}
Vertex = {
	{"vec","Old",{},{4}}, -- intersection of planes
	{"ord","Old",{},{4}}, -- coordinate or color
	{"ref","Int32",{},{4}}, -- backreference to planes
}
Vector = {
	{"vec","Old",{},{4}},
}
Matrix = {
	{"mat","Old",{},{16}},
}
Kernel = {
	{"count","Int",{},{}},
	{"comp","Matrix",{},{}},
	{"other","Matrix",{},{}},
	{"self","Matrix",{},{}},
	{"pulse","Matrix",{},{}},
	{"manip","Matrix",{},{}},
	{"copy","Matrix",{},{}},
}
Basis = {
	{"mat","Vector",{},{9}},
}
Image = {
	{"dat","Dat",{},{}},
	{"wid","Int",{},{}},
	{"hei","Int",{},{}},
	{"cha","Int",{},{}},
}
Pierce = {
	{"wid","Int32",{},{}},
	{"hei","Int32",{},{}},
	{"idx","Int32",{},{}},
	{"val","Old",{},{}},
}
Con = {
	{"tag","Constant",{},{}},
	{"mic","Micro",{["tag"]={["MicroCon"]=true}},{}},
	{"mem","Memory",{["tag"]={["MemoryCon"]=true}},{}},
	{"res","Resrc",{["tag"]={["ResrcCon"]=true}},{}},
}
Req = {
	{"tag","Request",{},{}},
	{"ptr","Dat",{},{}},
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"ext","Extent",{},{}},
	{"base","Int",{},{}},
	{"size","Int",{},{}},
	{"pre","Int",{},{}},
}
Rsp = {
	{"idx","Int",{},{}}, -- offset into bind->rsp
	{"siz","Int",{},{}}, -- number to unreserve of bind->rsp
}
Draw = {
	{"con","Con",{},{}},
	{"ptr","Dat",{},{}},
	{"siz","Int",{},{}},
	{"sze","Int",{},{}},
	{"arg","Int",{},"siz"},
	{"val","Int",{},"sze"},
}
DerIns = {
	{"loc","ResrcLoc",{},{}},
	{"res","Resrc",{},{}},	
	{"con","Con",{},{}}, -- delete once RuseQua value available in BaseState
	{"req","Req",{},{}},
	{"rsp","Rsp",{},{}},
	{"idx","Int",{},{}},
}
DeeIns = {
	{"res","Resrc",{},{}},
	{"idx","Int",{},{}},
}
TagIns = {
	{"tag","Quality",{},{}},
	{"idx","Int",{},{}},
}
IncIns = {
	{"res","Resrc",{},{}},
	{"mem","Memory",{},{}},
	{"mic","Micro",{},{}},
}
Ins = { -- TODO add TstIns
	{"ins","Instr",{},""},
	{"der","DerIns",{["ins"]={["QDerIns"]=true,["PDerIns"]=true,["IDerIns"]=true}},{}},
	{"dee","DeeIns",{["ins"]={["RDeeIns"]=true,["IDeeIns"]=true,["WDeeIns"]=true}},{}},
	{"tag","TagIns",{["ins"]={["RTagIns"]=true,["UTagIns"]=true,["WTagIns"]=true,["ITagIns"]=true,["JTagIns"]=true,["KTagIns"]=true,["CTagIns"]=true}},{}},
	{"inc","IncIns",{["ins"]={["RIncIns"]=true,["EIncIns"]=true,["IIncIns"]=true}},{}},
}
Center = {
	{"mem","Memory",{},""},
	{"siz","Int",{},{}},
	{"idx","Int",{},{}},
	{"slf","Int",{},{}},
	{"ind","Int32",{["mem"]={["Indexz"]=true}},"siz"},
	{"ver","Vertex",{["mem"]={["Bringupz"]=true}},"siz"},
	{"img","Image",{["mem"]={["Imagez"]=true}},"siz"},
	{"uni","Uniform",{["mem"]={["Uniformz"]=true}},"siz"},
	{"mat","Matrix",{["mem"]={["Matrixz"]=true}},"siz"},
	{"tri","Triangle",{["mem"]={["Trianglez"]=true}},"siz"},
	{"num","Numeric",{["mem"]={["Numericz"]=true}},"siz"},
	{"vtx","Vertex",{["mem"]={["Vertexz"]=true}},"siz"},
	{"bas","Basis",{["mem"]={["Basisz"]=true}},"siz"},
	{"eek","Pierce",{["mem"]={["Peekz"]=true}},"siz"},
	{"oke","Pierce",{["mem"]={["Pokez"]=true}},"siz"},
	{"drw","Draw",{["mem"]={["Drawz"]=true}},"siz"},
	{"com","Ins",{["mem"]={["Instrz"]=true}},"siz"},
	{"str","Str",{["mem"]={["Stringz"]=true}},"siz"},
	{"mch","Machine",{["mem"]={["Machinez"]=true}},"siz"},
	{"exp","Express",{["mem"]={["Expressz"]=true}},"siz"},
	{"ker","Kernel",{["mem"]={["Kernelz"]=true}},"siz"},
	{"cfg","Configure",{["mem"]={["Configurez"]=true}},"siz"},
	{"val","Int",{["mem"]={["Configurez"]=true}},"siz"},
}
Listed = {
	{"siz","Int",{},{}},
	{"idx","Int",{},"siz"},
}
Nested = {
	{"siz","Int",{},{}},
	{"lst","Listed",{},"siz"},
}
Scalar = {
	{"num","Old",{},3},
}
Change = {
	{"cfg","Emerg",{},{}},
	{"vld","Valid",{},{}},
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"vec","Scalar",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Planes"]=true}},"siz"},
	{"nst","Nested",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Halfs"]=true,}},"siz"},
	{"lst","Listed",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Coins"]=true}},"siz"},
	{"num","Int",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Subsets"]=true}},"siz"},
	{"pnt","Scalar",{["vld"]={["Toread"]=true},["cfg"]={["Points"]=true}},"siz"},
	{"fct","Listed",{["vld"]={["Toread"]=true},["cfg"]={["Facets"]=true}},"siz"},
}
Argument = {
	{"typ","Program",{},""},
	{"inp","Int",{},{}},
	{"out","Int",{},{}},
	{"idx","Int",{},{}},
	{"str","Str",{["typ"]={["Holez"]=true}},{}},
}
Valve = {
	{"tag","Stream",{},""},
	{"siz","Int",{["tag"]={["Fanout"]=true}},{}},
	{"dst","Str",{["tag"]={["Fanout"]=true}},"siz"},
	{"typ","Str",{["tag"]={["Fanout"]=true,["Buffer"]=true,["Execute"]=true}},{}},
	{"str","Str",{["tag"]={["Fanout"]=true,["Buffer"]=true}},{}},
	{"url","Str",{["tag"]={["Execute"]=true}},{}},
	{"arg","Argument",{["tag"]={["Execute"]=true}},1},
	{"exp","Express",{["tag"]={["Combine"]=true}},1},
	{"num","Int",{["tag"]={["Combine"]=true}},{}},
	{"dep","Str",{["tag"]={["Combine"]=true}},"num"},
}
--HERE
-- below for depend.lua
Wrap = {
}
Subtype = {
}
Field = {
}
Type = {
}
-- above for depend.lua
Enums,Enumz = listHere("Enums","type.gen")
Constants,Constantz = listHere("Constants","type.gen")
Structs,Structz = listHere("Structs","type.gen")
function showTypeC(args)
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result.."#include <unistd.h>\n"
	result = result.."#include <sys/errno.h>\n"
	result = result..showCallC(args).."\n"
	if (not args or args["execWrap"]) then
	result = result.."int execWrap(struct Argument *arg, const char *fork, const char *exec) {\n"
	result = result..showIndent(1).."int idx = openFork();\n"
	result = result..showIndent(1).."if (idx < 0) return -1;\n"
	result = result..showIndent(1).."if (openCheck(idx) >= 0) {\n"
	result = result..showIndent(2).."char *str = 0;\n"
	result = result..showIndent(2).."arg->inp=openRdfd(idx); arg->out=openWrfd(idx);\n"
	result = result..showIndent(2).."showArgument(arg,&str);\n"
	result = result..showIndent(2).."openExec(exec,str); fprintf(stderr,\"%s: cannot execute file: %s\\n\",fork,exec); ERROR();}\n"
	result = result..showIndent(1).."return idx;}\n" end
	if (not args or args["typeWrap"]) then
	result = result.."int typeWrap(enum Program typ, const char *fork, const char *exec) {\n"
	result = result..showIndent(1).."struct Argument arg = {0};\n"
	result = result..showIndent(1).."arg.typ = typ;\n"
	result = result..showIndent(1).."return execWrap(&arg,fork,exec);}\n" end
	if (not args or args["initWrap"]) then
	result = result.."int initWrap(struct Argument *arg, const char *str) {\n"
	result = result..showIndent(1).."int len = 0;\n"
	result = result..showIndent(1).."if (!hideArgument(arg,str,&len)) return -1;\n"
	result = result..showIndent(1).."arg->idx = rdwrInit(arg->inp,arg->out);\n"
	result = result..showIndent(1).."return 0;}\n" end
	if (not args or args["identWrap"]) then
	result = result.."int identWrap(enum Program typ, const char *str) {\n"
	result = result..showIndent(1).."struct Argument arg = {0};\n"
	result = result..showIndent(1).."if (initWrap(&arg,str) < 0 || arg.typ != typ) return -1;\n"
	result = result..showIndent(1).."return arg.idx;}" end
	return result
end
function showTypeH()
	local result = ""
	result = result.."#include \"proto.h\"\n"
	result = result..showCallH().."\n"
	result = result.."int execWrap(struct Argument *arg, const char *fork, const char *exec);\n"
	result = result.."int typeWrap(enum Program typ, const char *fork, const char *exec);\n"
	result = result.."int initWrap(struct Argument *arg, const char *str);"
	result = result.."int identWrap(enum Program typ, const char *str);\n"
	return result
end
function showTypeHs(args)
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.IO\n"
	result = result.."import Data.IORef\n"
	result = result.."import Data.Int\n"
	result = result.."import Foreign.C.Types\n"
	result = result.."--\n"
	result = result.."type Dat = [CChar]\n"
	result = result..showCallHs(arg).."\n"
	if (not args or args["Wrap"]) then
	result = result.."execWrap :: Argument -> String -> String -> IO (Maybe Int)\n"
	result = result.."execWrap (Argument (ArgumentA1 typ _ _ idx) arg) fork exec = do\n"
	result = result..showIndent(1).."idx <- openFork\n"
	result = result..showIndent(1).."if idx < 0 then return Nothing else do\n"
	result = result..showIndent(2).."vld <- openCheck idx\n"
	result = result..showIndent(2).."if vld < 0 then return (Just idx) else do\n"
	result = result..showIndent(3).."inp <- openRdfd idx\n"
	result = result..showIndent(3).."out <- openWrfd idx\n"
	result = result..showIndent(3).."ptr <- newIORef \"\"\n"
	result = result..showIndent(3).."showArgument (Argument (ArgumentA1 typ inp out idx) arg) ptr\n"
	result = result..showIndent(3).."str <- readIORef ptr\n"
	result = result..showIndent(3).."openExec exec str\n"
	result = result..showIndent(3).."hPutStrLn stderr (fork ++ \": cannot execute file: \" ++ exec)\n"
	result = result..showIndent(3).."callExit (negate 1)\n"
	result = result..showIndent(3).."return Nothing\n"
	result = result.."typeWrap :: Program -> String -> String -> IO (Maybe Int)\n"
	result = result.."typeWrap typ fork exec = execWrap (Argument (ArgumentA1 typ 0 0 0) ArgumentA5Bs) fork exec\n"
	result = result.."initWrapF :: Maybe Argument -> IO (Maybe Argument)\n"
	result = result.."initWrapF Nothing = return Nothing\n"
	result = result.."initWrapF (Just (Argument (ArgumentA1 typ inp out _) arg)) = do\n"
	result = result..showIndent(1).."idx <- rdwrInit inp out\n"
	result = result..showIndent(1).."return (Just (Argument (ArgumentA1 typ inp out idx) arg))\n"
	result = result.."initWrap :: String -> IO (Maybe Argument)\n"
	result = result.."initWrap str = newIORef str >>= hideArgument >>= initWrapF\n"
	result = result.."identWrapF :: Program -> Maybe Argument -> IO (Maybe Int)\n"
	result = result.."identWrapF _ Nothing = return Nothing\n"
	result = result.."identWrapF cmp (Just (Argument (ArgumentA1 typ _ _ idx) _)) =\n"
	result = result..showIndent(1).."if cmp /= typ then\n"
	result = result..showIndent(1).."return Nothing else\n"
	result = result..showIndent(1).."return (Just idx)\n"
	result = result.."identWrap :: Program -> String -> IO (Maybe Int)\n"
	result = result.."identWrap typ str = initWrap str >>= identWrapF typ\n" end
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"luax\"\n"
	result = result.."--\n"
	result = result..showCallLua().."\n"
	result = result.."function execWrap(arg,fork,exec)\n"
	result = result..showIndent(1).."idx = openFork()\n"
	result = result..showIndent(1).."if (idx < 0) then return -1 end\n"
	result = result..showIndent(1).."if (openCheck(idx) >= 0) then\n"
	result = result..showIndent(1).."arg[\"inp\"]=openRdfd(idx); arg[\"out\"]=openWrfd(idx); arg[\"idx\"]=-1\n"
	result = result..showIndent(1).."if (arg[\"typ\"] == nil) then arg[\"typ\"] = \"Programs\"end\n"
	result = result..showIndent(2).."str = showArgument(arg,\"\")\n"
	result = result..showIndent(2).."openExec(exec,str); io.stderr:write(fork..\": cannot execute file: \"..exec..\"\\n\"); os.exit(-1)\n"
	result = result..showIndent(1).."end\n"
	result = result..showIndent(1).."return idx\n"
	result = result.."end\n"
	result = result.."function typeWrap(typ,fork,exec)\n"
	result = result..showIndent(1).."arg[\"typ\"] = typ\n"
	result = result..showIndent(1).."return execWrap(arg,fork,exec)\n"
	result = result.."end\n"
	result = result.."function initWrap(str)\n"
	result = result..showIndent(1).."arg,len = hideArgument(str,0)\n"
	result = result..showIndent(1).."if (arg == nil) then return nil end\n"
	result = result..showIndent(1).."arg[\"idx\"] = rdwrInit(arg[\"inp\"],arg[\"out\"])\n"
	result = result..showIndent(1).."return arg\n"
	result = result.."end\n"
	result = result.."function identWrap(typ,str)\n"
	result = result..showIndent(1).."arg = initWrap(str)\n"
	result = result..showIndent(1).."if (arg == nil) or not (arg[\"typ\"] == typ) then return -1 end\n"
	result = result..showIndent(1).."return arg[\"idx\"]\n"
	result = result.."end"
	return result
end
args = nil
if (arg[2] ~= nil) then
	args = {}
	for line in io.lines(arg[2]) do
		local deps = line
		while (1) do
			local word,rest = string.match(deps," *([%w]+)(.*)")
			if word == nil then break end
			if string.match(word,"..*Type") then args = nil; break end
			if string.match(word,"..*Field") then args = nil; break end
			if string.match(word,"..*Subtype") then args = nil; break end
			args[word] = true
			deps = rest
		end
	end
end
base,ext = string.match(arg[1],"([%w.]*)(%.[%w]*)")
file = io.open(base..ext, "w")
if (base and ext and ext == ".h") then
	file:write(showTypeH().."\n")
end
if (base and ext and ext == ".c") then
	file:write(showTypeC(args).."\n")
end
if (base and ext and ext == ".hs") then
	file:write(showTypeHs(args).."\n")
end
if (base and ext and ext == ".lua") then
	file:write(showTypeLua().."\n")
end
file:close()
