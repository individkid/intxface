dofile("show.lua")

--HERE Enums
Goal = {
	"NewHub", -- open file
	"ThdHub",
	"CfgHub", -- set pid and forward
	"AppHub", -- set pid and forward
	"HubThd", -- lock write forwarded
	"AppThd", -- lock append forwarded
	"ThdThd", -- file change notify
	"HubCfg", -- identify file change
	"ThdErr", -- close and report
	"HubErr", -- report and exit
}
Level = {
	"Stock",
	"First",
	"Assign",
	"Link",
	"Wave",
	"Timer",
	"Audio",
}
Flow = {
	"Sched",
	"Back",
	"Peek",
	"Poke",
	"Store",
	"Load",
}
Memory = {
	"Indexz", -- fetch buffer indices
	"Bringupz", -- fetch buffer verticse
	"Imagez", -- facet decorations
	"Uniformz", -- references into arrays
	"Matrixz", -- transformations
	"Trianglez", -- indices of vertices of facet
	"Numericz", -- distances of plane above selected base
	"Vertexz", -- intersection of backlinked planes
	"Basisz", -- base for each dimension
	"Peekz", -- per fragment read
	"Pokez", -- per fragment write
	"Drawz", -- draw range info
	"Instrz", -- little vulkan language
	"Stringz", -- string memory
	"Machinez", -- state machine lines
	"Kernelz", -- inflight transformations
	"Configurez", -- configure to value
}
Resrc = { -- per variation of BaseState
	"SwapRes",
	"PipeRes",
	"IndexRes",
	"BringupRes",
	"ImageRes",
	"UniformRes",
	"MatrixRes",
	"TriangleRes",
	"NumericRes",
	"VertexRes",
	"BasisRes",
	"PierceRes",
	"ChainRes",
	"DrawRes",
	"BindRes",
}
Micro = { -- what runs on gpu
	"MicroTest", -- for Bringup Plan
	"MicroDebug", -- for testing microcode
}
Constant = {
	"MicroCon",
	"MemoryCon",
	"ResrcCon",
}
ResrcLoc = {
	"ResizeLoc",
	"ReformLoc",
	"BeforeLoc", -- like Acquire
	"MiddleLoc", -- like Draw
	"AfterLoc", -- like Present
	-- "Sync5Loc",
	-- "Sync6Loc",
}
Extent = { -- resource initialization done on gpu thread
	"InitExt", -- leave in initial state; don't resize
	"IntExt", -- resize to base,size
	"FormExt", -- reform to format
	"ExtentExt", -- resize to 2d vk extent
	"MicroExt", -- resize to micro enum
	"ResrcExt", -- resize to bind enum
	"TrueExt", -- resize once for side effects
	"FalseExt", -- resize every time for side effects
}
Request = {
	"BothReq", -- call resize if changed, and call setup
	"LockReq", -- call setup
	"SizeReq", -- call resize if changed
	"ExclReq", -- call resize and setup if changed
}
Format = {
	"VecFrm", -- VkFormat
	"UvecFrm", -- VkFormat
	"OldFrm", -- VkFormat
	"Int32Frm", -- VkFormat
	"ImageFrm", -- ExclReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (undefined to readonly)
	"WonlyFrm", -- BothReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (readonly to dst)
	"RonlyFrm", -- BothReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (dst to readonly)
	"PierceFrm", -- ExclReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (undefined to color)
	"PeekFrm", -- BothReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (color to src)
	"SourceFrm", -- BothReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (src to color)
	"PokeFrm", -- BothReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (color to dst)
	"DestFrm", -- BothReq FormExt siz(width*height*pixel_size) base(implied:src) size(implied:dst) (dst to color)
	"ExtentFrm", -- SizeReq ExtentExt base(width) size(height)
	"SizeFrm", -- SizeReq IntExt base size
	"HighFrm", -- BothReq FormExt ptr(raw data) siz(width*height*pixel_size) base(width) size(height)
	"WholeFrm", -- BothReq IntExt ptr(raw data) idx(identifier of first in buffer) siz(buffer size) base(implied: same as idx) size(implied: same as siz)
	"IndexFrm", -- SizeReq MicroExt base(same as resource index)
	"CastFrm", -- BothReq ExtentExt ptr(elements) siz(number of elements) base(width) size(height)
	"MicroFrm", -- BothReq MicroExt idx(first vertex shader index) siz(number of vertex shader indices) base(which shader set)
	"ConstFrm", -- SizeReq MicroExt base(which shader set)
	"FalseFrm", -- SizeReq FalseExt(always resize)
	"TrueFrm", -- SizeReq TrueExt(resize once)
}
Instr = {
	"DerIns",  -- advance before push to thread
	"PDerIns", -- advance after fence in thread
	"IDerIns", -- process a particular instance
	"RDeeIns", -- increment read lock in current
	"IRDeeIns", -- increment read lock in indexed
	"WDeeIns", -- increment write lock in current
}
Configure = {
	"IndexBase",
	"IndexSize",
	"BringupBase",
	"BringupSize",
	"ImageBase",
	"ImageSize",
	"UniformBase",
	"UniformSize",
	"MatrixBase",
	"MatrixSize",
	"TriangleBase",
	"TriangleSize",
	"NumericBase",
	"NumericSize",
	"VertexBase",
	"VertexSize",
	"BasisBase",
	"BasisSize",
	"PierceBase",
	"PierceSize",
	"CenterSize",
	"CenterMem", -- staged field
	"CenterSiz",
	"CenterIdx",
	"CenterSlf",
	"ArgumentInp", -- staged field
	"ArgumentOut",
	"MachineIndex", -- running machine
	"MachineLast", -- reset vector
	"RegisterOpen", -- thread mask
	"RegisterPlan", -- testing plan
	"RegisterCount", -- test progress
	"RegisterLimit", -- progress limit
	"RegisterPoll", -- poll microseconds
	"RegisterPass", -- pass center index
	"RegisterFail", -- fail center index
	"RegisterMask", -- interrupt mask
	"RegisterStrq", -- num strings in queue
	"ProbePoke", -- probe state
	"ProbePeek",
	"ProbeIndex",
	"ProbeField",
	"ProbeDimen",
	"ManipFixed",
	"ManipLeft",
	"ManipBase",
	"ClickLeft",
	"ClickBase",
	"FixedLeft",
	"FixedBase",
	"FixedDeep",
	"NormalLeft",
	"NormalBase",
	"NormalDeep",
	"MonitorWidth",
	"MonitorHeight",
	"PhysicalWidth",
	"PhysicalHeight",
	"WindowWidth",
	"WindowHeight",
	"WindowLeft",
	"WindowBase",
	"FocalLength",
	"FocalDepth",
}
Transfer = {
	"Stage", -- center fields to configure
	"Tsage", -- configure to center fields
	"Force", -- machine to configure
	"Eval", -- call datxEval
	"Click", -- change manipulator
	"Manip", -- manipulate local
	"Pulse", -- clear to towrite
	"Self", -- clear to written
	"Other", -- maintain as if
	"Comp", -- compose for draw
	"Bopy", -- center to center
	"Copy", -- center to memory
	"Dopy", -- center from memory
	"Popy", -- from queue to center
	"Qopy", -- from center to queue
	"Jump", -- skip if true
	"Goto", -- jump if true
	"Nest", -- nest to level
}
ClickArg = {
	"ClickSrc",
	"ClickSrcSub",
	"ClickDst",
	"ClickDstSub",
}
ManipArg = {
	"ManipDst",
	"ManipDstSub",
}
PulseArg = {
	"PulseSrc",
	"PulseSrcSub",
	"PulseDst",
	"PulseDstSub",
}
SelfArg = {
	"SelfSrc",
	"SelfSrcSub",
	"SelfDst",
	"SelfDstSub",
}
OtherArg = {
	"OtherSrc",
	"OtherSrcSub",
	"OtherDst",
	"OtherDstSub",
}
CompArg = {
	"CompSrc",
	"CompSrcSub",
	"CompDst",
	"CompDstSub",
}
BopyArg = {
	"BopySrc",
	"BopySrcSub",
	"BopyDst",
	"BopyDstSub",
	"BopyCount",
}
CopyArg = {
	"CopySrc",
}
DopyArg = {
	"DopySrc",
	"DopyDst",
}
PopyArg = {
	"PopyDst",
}
QopyArg = {
	"QopySrc",
}
Plan = { -- which test to run
	"Bringup", -- reproduce the tutorial
	"Regress", -- test each transformation with Configure values; send and receive Matrixz with planer.lua
	"Builtin", -- test each interaction with space with shader indexed Memory buffers and depth color
	"Release", -- complete user mouse and roller modes and make persistent through share to file
}
Action = { -- what input does
	"Indicate", -- move to new piere point
	"Collect", -- identify subpolytope
	"Manipulate", -- apply transformation
	"Refine", -- add boundaries
	"Additive", -- add regions
	"Subtractive", -- remove regions
}
Fixed = { -- how motion interpreted
	"Mouse", -- how many fixed
	"Roller",
	"Slide", -- how changed
	"Rotate",
	"Scale",
	"Cursor", -- what fixed
	"Focal",
	"Ortho",
	"Normal",
}
Thread = { -- separate threads
	"PipeThd",
	"StdioThd",
	"CopyThd",
	"FenceThd",
	"TestThd",
}
Mask = { -- signals between threads
	"FnceMsk",
	"SizeMsk",
	"SelfMsk",
	"NslfMsk",
	"SlctMsk",
	"CnslMsk",
	"PassMsk",
	"FailMsk",
}
Emerg = { -- topology state
	"Planes", -- Scalar -- [Plane] -- per boundary
	"Halfs", -- Nested -- Space -- per boundary
	"Coins", -- Listed -- [[Boundary]] -- per vertex
	"Points", -- Scalar -- [Point] -- per vertex
	"Facets", -- Listed -- [[Vertex]] -- per facet vertex triplets
	"Subsets", -- Int -- [Region] -- in context of space
}
Valid = {
	"Toread", -- request for response
	"Toresp", -- response to request
	"Towrite", -- overwrite given element
	"Toadd", -- additively change
	"Tosub", -- subtractively change
}
Stream = { -- commandline process pipe connector
	"Fanout", -- write from readable pipe round robin to one of several pipes
	"Combine", -- write to pipe from expression if any of several expression values change
	"Buffer", -- set expression value from pipe
	"Execute", -- start a filter between the last and next pipe
}
Operate = { -- little language expressions
	"AddOp",
	"SubOp",
	"MulOp",
	"DivOp",
	"RemOp",
	"CndOp", -- switch on exp
	"TotOp", -- cast to type
	"RetOp", -- config from callback
	"SetOp", -- callback with config
	"ValOp", -- value from lookup
	"SavOp", -- value for lookup
	"OptOp", -- cache result
	"RexOp", -- regex sugar
	"IrxOp", -- irrex sugar
	"CmpOp", -- compare sugar
	"DatOp", -- memset Dat
	"GetOp", -- string from callback
	"PutOp", -- callback with string
	"FldOp", -- fields to struct
	"ExtOp", -- fields from struct
	"PrmOp", -- permute of list
	"LstOp", -- list of Dat
	"ImmOp", -- built in value
	"IntOp", -- ImmOp sugar
	"StrOp", -- ImmOp sugar
	"CfgOp", -- ImmOp sugar
	"MemOp", -- ImmOp sugar
	"UnqOp", -- magic number
}
Compare = { -- little language comparisons
	-- Less Equal More
	-- Open Closed
	"LOCmp",
	"LCCmp",
	"EOCmp",
	"ECCmp",
	"MOCmp",
	"MCCmp",
	"ReCmp", -- regular expression
	"IrCmp", -- irregular expression
}
Order = { -- ireg expression operators
	"ChrOrd",
	"PreOrd",
	"PostOrd",
	"PermOrd",
	"ForkOrd",
	"BeginOrd",
}
Program = { -- process type in standard commandline argument
	"Filez", -- Persist
	"Holez", -- Persist
	"Linez", -- Event
	"Planez", -- Center
	"Spacez", -- Change
	"Sidez", -- Persist gui
	"Framez", -- video little language
	"Sharez", -- Valve
}
Tag = { -- type of data piped between processes
	"Persistz", -- file hole side
	"Eventz", -- line
	"Centerz", -- plane
	"Changez", -- space
	-- video little language -- frame
}
--HERE Constants
ResrcStride = {
	{"Resrc","VertexRes","Int","48"},
}
ResrcOffset = {
	{"Resrc","VertexRes","Int","0","Int","0"},
	{"Resrc","VertexRes","Int","1","Int","16"},
	{"Resrc","VertexRes","Int","2","Int","32"},
}
ResrcFormat = {
	{"Resrc","VertexRes","Int","0","Format","VecFrm"},
	{"Resrc","VertexRes","Int","1","Format","VecFrm"},
	{"Resrc","VertexRes","Int","2","Format","UvecFrm"},
}
ResrcElement = {
	{"Resrc","VertexRes","Int","0","Format","OldFrm"},
	{"Resrc","VertexRes","Int","1","Format","OldFrm"},
	{"Resrc","VertexRes","Int","2","Format","Int32Frm"},
}
FormatSize = {
	{"Format","VecFrm","Int","16"},
	{"Format","UvecFrm","Int","16"},
	{"Format","OldFrm","Int","4"},
	{"Format","Int32Frm","Int","4"},
}
VertexResrc = {
	{"Micro","MicroTest","Int","0","Resrc","VertexRes"},
	{"Micro","MicroDebug","Int","0","Resrc","VertexRes"},
}
VertexFile = {
	{"Micro","MicroTest","Str","vertexFlattenG"},
	{"Micro","MicroDebug","Str","vertexDebugG"},
}
FragmentFile = {
	{"Micro","MicroTest","Str","fragmentFlattenG"},
	{"Micro","MicroDebug","Str","fragmentDebugG"},
}
MemoryIns = {
	{"Memory","Indexz","Int","0","Resrc","IndexRes"},
	{"Memory","Bringupz","Int","0","Resrc","BringupRes"},
	{"%(mem={\"Imagez\",\"Pokez\",\"Peekz\"};"..
	"ref={\"ImageFrm\",\"PierceFrm\",\"PierceFrm\"}"..
	"bef={\"WonlyFrm\",\"PokeFrm\",\"PeekFrm\"}"..
	"mid={\"HighFrm\",\"HighFrm\",\"HighFrm\"}"..
	"aft={\"RonlyFrm\",\"DestFrm\",\"SourceFrm\"}"..
	"function fnc (lst) for i,v in ipairs(lst) do if i ~= #mem then coroutine.yield(v) else return v end end end;"..
	"return \"Memory\")","%(return fnc(mem))","Int","0","Instr","IDerIns"},
	{"Memory","%(return fnc(mem))","Int","0","Resrc","ImageRes"},
	{"Memory","%(return fnc(mem))","Int","0","ResrcLoc","ResizeLoc"},
	{"Memory","%(return fnc(mem))","Int","0","Format","ExtentFrm"},
	{"Memory","%(return fnc(mem))","Int","1","ResrcLoc","ReformLoc"},
	{"Memory","%(return fnc(mem))","Int","1","Format","%(return fnc(ref))"},
	{"Memory","%(return fnc(mem))","Int","2","ResrcLoc","BeforeLoc"},
	{"Memory","%(return fnc(mem))","Int","2","Format","%(return fnc(bef))"},
	{"Memory","%(return fnc(mem))","Int","3","ResrcLoc","MiddleLoc"},
	{"Memory","%(return fnc(mem))","Int","3","Format","%(return fnc(mid))"},
	{"Memory","%(return fnc(mem))","Int","4","ResrcLoc","AfterLoc"},
	{"Memory","%(return fnc(mem))","Int","4","Format","%(return fnc(aft))"},
	{"Memory","Uniformz","Int","0","Resrc","UniformRes"},
	{"Memory","Matrixz","Int","0","Resrc","MatrixRes"},
	{"Memory","Trianglez","Int","0","Resrc","TriangleRes"},
	{"Memory","Numericz","Int","0","Resrc","NumericRes"},
	{"Memory","Vertexz","Int","0","Resrc","VertexRes"},
	{"Memory","Basisz","Int","0","Resrc","BasisRes"},
}
ResrcIns = {
	{"Resrc","SwapRes","Int","0","Instr","PDerIns"},
	{"Resrc","SwapRes","Int","0","Resrc","SwapRes"},
	{"Resrc","SwapRes","Int","0","ResrcLoc","ResizeLoc"},
	{"Resrc","SwapRes","Int","0","Format","FalseFrm"},
	{"Resrc","PipeRes","Int","0","Instr","IDerIns"},
	{"Resrc","PipeRes","Int","0","Format","IndexFrm"},
	{"Resrc","IndexRes","Int","0","Resrc","IndexRes"},
	{"Resrc","BringupRes","Int","0","Resrc","BringupRes"},
	{"Resrc","ImageRes","Int","0","Instr","IDerIns"},
	{"Resrc","ImageRes","Int","0","Resrc","ImageRes"},
	{"Resrc","ImageRes","Int","0","Format","ExtentFrm"},
	{"Resrc","UniformRes","Int","0","Resrc","UniformRes"},
	{"Resrc","MatrixRes","Int","0","Resrc","MatrixRes"},
	{"Resrc","TriangleRes","Int","0","Resrc","TriangleRes"},
	{"Resrc","NumericRes","Int","0","Resrc","NumericRes"},
	{"Resrc","VertexRes","Int","0","Resrc","VertexRes"},
	{"Resrc","BasisRes","Int","0","Resrc","BasisRes"},
	{"Resrc","PierceRes","Int","0","Instr","IDerIns"},
	{"Resrc","PierceRes","Int","0","Resrc","PierceRes"},
	{"Resrc","PierceRes","Int","0","Format","ExtentFrm"},
	{"Resrc","ChainRes","Int","0","Resrc","ChainRes"},
	{"Resrc","ChainRes","Int","0","Format","TrueFrm"},
	{"Resrc","DrawRes","Int","0","Resrc","DrawRes"},
	{"Resrc","DrawRes","Int","0","Format","ConstFrm"},
}
MicroIns = {
	{"Micro","MicroTest","Int","0","Instr","DerIns"},
		{"Micro","MicroTest","Int","0","Resrc","ChainRes"},
		{"Micro","MicroTest","Int","0","ResrcLoc","BeforeLoc"},
		{"Micro","MicroTest","Int","0","Format","MicroFrm"},
	{"Micro","MicroTest","Int","1","Instr","RDeeIns"},
		{"Micro","MicroTest","Int","1","Resrc","SwapRes"},
	{"Micro","MicroTest","Int","2","Instr","DerIns"},
		{"Micro","MicroTest","Int","2","Resrc","DrawRes"},
		{"Micro","MicroTest","Int","2","ResrcLoc","MiddleLoc"},
	{"Micro","MicroTest","Int","3","Instr","RDeeIns"},
		{"Micro","MicroTest","Int","%(dee = {\"SwapRes\",\"ChainRes\",\"MatrixRes\",\"ImageRes\",\"IndexRes\",\"BringupRes\"}; for i,v in ipairs(dee) do if i~=#dee then coroutine.yield(i+2) else return i+2 end end)","Resrc","%(for i,v in ipairs(dee) do if i~=#dee then coroutine.yield(v) else return v end end)"},
	{"Micro","MicroTest","Int","9","Instr","IRDeeIns"},
		{"Micro","MicroTest","Int","9","Resrc","PipeRes"},
	{"Micro","MicroTest","Int","10","Instr","DerIns"},
		{"Micro","MicroTest","Int","10","Resrc","ChainRes"},
		{"Micro","MicroTest","Int","10","ResrcLoc","AfterLoc"},
	{"Micro","MicroTest","Int","11","Instr","RDeeIns"},
		{"Micro","MicroTest","Int","11","Resrc","SwapRes"},
	{"Micro","MicroTest","Int","12","Instr","IRDeeIns"},
		{"Micro","MicroTest","Int","12","Resrc","PipeRes"},
	{"Micro","MicroDebug","Int","0","Instr","DerIns"},
		{"Micro","MicroDebug","Int","0","Resrc","DrawRes"},
		{"Micro","MicroDebug","Int","1","ResrcLoc","MiddleLoc"},
	{"Micro","MicroDebug","Int","1","Instr","WDeeIns"},
		{"Micro","MicroDebug","Int","1","Resrc","PierceRes"},
	{"Micro","MicroDebug","Int","2","Instr","RDeeIns"},
		{"Micro","MicroDebug","Int","%(dee = {\"MatrixRes\",\"ImageRes\",\"IndexRes\",\"BringupRes\"}; for i,v in ipairs(dee) do if i~=#dee then coroutine.yield(i+1) else return i+1 end end)","Resrc","%(for i,v in ipairs(dee) do if i~=#dee then coroutine.yield(v) else return v end end)"},
	{"Micro","MicroDebug","Int","6","Instr","IRDeeIns"},
		{"Micro","MicroDebug","Int","6","Resrc","PipeRes"},
}
Bootstrap = {
	{"Int","0","Int","0"},
	{"Int","0","Str","Force(num:3"..
		"cfg[0]:RegisterPlan"..
		"cfg[1]:RegisterLimit"..
		"cfg[2]:RegisterPoll"..
		"val[0]:%(return castPlan(\"Bringup\"))"..
		"val[1]:1000"..
		"val[2]:1)"},
}
Execname = {
	{"Program","Filez","Str","./file"},
	{"Program","Holez","Str","./hole"},
	{"Program","Linez","Str","./line"},
	{"Program","Planez","Str","./plane"},
	{"Program","Spacez","Str","./space"},
	{"Program","Sidez","Str","./side"},
	{"Program","Framez","Str","./frame"},
	{"Program","Sharez","Str","./share"},
}
--HERE Structs
Persist = { -- for file hole side
	{"act","Goal",{},{}},
	{"idx","Int",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true
	}},{}}, -- identifier for file
	{"loc","New",{["act"]={
		["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true,
		["HubCfg"]=true
	}},{}}, -- location in file
	{"pid","New",{["act"]={
		["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,["ThdThd"]=true
	}},{}}, -- process id for fifo
	{"slf","Int",{["act"]={
		["HubCfg"]=true
	}},{}}, -- whether process id is self
	{"str","Str",{["act"]={
		["NewHub"]=true,["CfgHub"]=true,["AppHub"]=true,["ThdHub"]=true,
		["HubThd"]=true,["AppThd"]=true,
		["HubCfg"]=true,
		["ThdErr"]=true,["HubErr"]=true
	}},{}}, -- file or field
}
Term0 = {
	{"cff","Num",{},{}},
}
Term1 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{1}},
}
Term2 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{2}},
}
Term3 = {
	{"cff","Num",{},{}},
	{"vry","Int",{},{3}},
}
Nomial = {
	{"num0","Int",{},{}},
	{"trm0","Term0",{},"num0"},
	{"num1","Int",{},{}},
	{"trm1","Term1",{},"num1"},
	{"num2","Int",{},{}},
	{"trm2","Term2",{},"num2"},
	{"num3","Int",{},{}},
	{"trm3","Term3",{},"num3"},
}
Ratio = {
	{"num","Nomial",{},{}},
	{"den","Nomial",{},{}},
}
Event = { -- for line process
	{"tag","Level",{},{}},
	{"idx","Int",{},{}},
	{"oth","Int",{},{}},
	{"key","Num",{},{}},
	{"val","Num",{},{}},
	{"upd","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"dly","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"sch","Ratio",{["tag"]={["Stock"]=true}},{}},
	{"flw","Flow",{["tag"]={["Link"]=true}},{}},
	{"siz","Int",{["tag"]={["Wave"]=true}},{}},
	{"buf","Num",{["tag"]={["Wave"]=true}},"siz"},
	{"num","Int",{["tag"]={["Timer"]=true}},{}},
	{"tot","Int",{["tag"]={["Timer"]=true}},{}},
	{"ids","Int",{["tag"]={["Timer"]=true}},"num"},
	{"req","Int",{["tag"]={["Timer"]=true}},"num"},
	{"rsp","Num",{["tag"]={["Timer"]=true}},"tot"},
	{"wrp","Num",{["tag"]={["Audio"]=true}},{}},
	{"gap","Int",{["tag"]={["Audio"]=true}},{}},
	{"cdt","Int",{["tag"]={["Audio"]=true}},{}},
	{"len","Int",{["tag"]={["Audio"]=true}},{}},
	{"enb","Int",{["tag"]={["Audio"]=true}},{}},
}
Domain = {
	{"len","Int",{},{}},
	{"val","Express",{},"len"},
}
CondExp = {
	{"len","Int",{},{}},
	{"siz","Int",{},{}},
	{"typ","Str",{},"len"},
	{"cmp","Compare",{},"len"},
	{"var","Express",{},"len"},
	{"dom","Domain",{},"siz"},
	{"rng","Express",{},"siz"},
}
OptExp = {
	{"vld","Int",{},{}},
	{"exp","Express",{["vld"]={["0"]=true}},1},
	{"typ","Int",{["vld"]={["1"]=true}},{}},
	{"dat","Dat",{["vld"]={["1"]=true}},{}},
}
Irrex = { -- permutation of permutations
	-- prm of zero is always valid
	-- advance top level prm first, otherwise
	-- reset top level and advence next level down
	{"str","Str",{},{}}, -- stateful evaluation
	{"prm","Int",{},{}}, -- stateful evaluation
	{"msk","Int",{},{}}, -- stateful evaluation
	{"ord","Order",{},{}}, -- type of comparison
	{"siz","Int",{},{}}, -- zero for ChrOrd
	{"sub","Irrex",{},"siz"},
}
Datex = { -- given index, return vector
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"dim","Int",{},{}},
	{"min","Int",{},"dim"},
	{"max","Int",{},"dim"},
	{"fsz","Int",{},{}},
	{"rsz","Int",{},{}},
	{"fwd","Int",{},"fsz"},
	{"rev","Int",{},"rsz"},
}
Express = {
	{"opr","Operate",{},""},
	{"opb","Express",{["opr"]={["AddOp"]=true,["SubOp"]=true,["MulOp"]=true,["DivOp"]=true,["RemOp"]=true}},2},
	{"cnd","CondExp",{["opr"]={["CndOp"]=true}},1},
	{"typ","Str",{["opr"]={["TotOp"]=true}},{}},
	{"tot","Express",{["opr"]={["TotOp"]=true}},1},
	{"cfg","Configure",{["opr"]={["RetOp"]=true}},{}},
	{"cgs","Configure",{["opr"]={["SetOp"]=true}},{}},
	{"set","Express",{["opr"]={["SetOp"]=true}},1},
	{"key","Str",{["opr"]={["ValOp"]=true}},{}},
	{"kys","Str",{["opr"]={["SavOp"]=true}},{}},
	{"sav","Express",{["opr"]={["SavOp"]=true}},1},
	{"opt","OptExp",{["opr"]={["OptOp"]=true}},1},
	{"rex","Str",{["opr"]={["RexOp"]=true}},{}},
	{"irx","Str",{["opr"]={["IrxOp"]=true}},{}},
	{"csz","Int",{["opr"]={["CmpOp"]=true}},{}},
	{"cmp","Express",{["opr"]={["CmpOp"]=true}},1},
	{"dsz","Int",{["opr"]={["DatOp"]=true}},{}},
	{"dvl","Int",{["opr"]={["DatOp"]=true}},{}},
	{"put","Express",{["opr"]={["PutOp"]=true}},1}, -- str:Str :Dat
	{"fld","Express",{["opr"]={["FldOp"]=true}},4}, -- giv:Gen val:Het str:Hom idx:Hom :Gen
	{"ext","Express",{["opr"]={["ExtOp"]=true}},3},
	{"prm","Express",{["opr"]={["PrmOp"]=true}},2},
	{"lst","Express",{["opr"]={["LstOp"]=true}},2},
	{"val","Str",{["opr"]={["ImmOp"]=true}},1},
	{"ivl","Int",{["opr"]={["IntOp"]=true}},{}},
	{"svl","Str",{["opr"]={["StrOp"]=true}},{}},
	{"cvl","Configure",{["opr"]={["CfgOp"]=true}},{}},
	{"mvl","Memory",{["opr"]={["MemOp"]=true}},{}},
}
Machine = {
	{"xfr","Transfer",{},""},
	{"siz","Int",{["xfr"]={["Stage"]=true,["Tsage"]=true}},{}},
	{"sav","Configure",{["xfr"]={["Stage"]=true,["Tsage"]=true}},"siz"},
	{"idx","Int",{["xfr"]={["Stage"]=true,["Tsage"]=true}},{}},
	{"num","Int",{["xfr"]={["Force"]=true}},{}},
	{"cfg","Configure",{["xfr"]={["Force"]=true}},"num"},
	{"val","Int",{["xfr"]={["Force"]=true}},"num"},
	{"fnc","Express",{["xfr"]={["Eval"]=true}},1},
	{"res","Int",{["xfr"]={["Eval"]=true}},{}},
	{"sig","Int",{["xfr"]={["Manip"]=true,["Pulse"]=true,["Self"]=true,["Other"]=true,["Click"]=true,["Comp"]=true,
		["Bopy"]=true,["Copy"]=true,["Dopy"]=true,["Popy"]=true,["Qopy"]=true}},{}},
	{"arg","Int",{["xfr"]={["Manip"]=true,["Pulse"]=true,["Self"]=true,["Other"]=true,["Click"]=true,["Comp"]=true,
		["Bopy"]=true,["Copy"]=true,["Dopy"]=true,["Popy"]=true,["Qopy"]=true}},"sig"},
	{"exp","Express",{["xfr"]={["Jump"]=true,["Goto"]=true,["Eval"]=true}},1},
	{"lvl","Int",{["xfr"]={["Nest"]=true}},{}},
}
Uniform = {
	{"all","Int32",{},{}}, -- which subject to use
	{"one","Int32",{},{}}, -- which element to use
	{"pro","Int32",{},{}}, -- which projection to use
	{"win","Int32",{},{}}, -- which window to use

	{"lon","Int32",{},{}}, -- horizontal axis of cursor
	{"lat","Int32",{},{}}, -- vertical axis of cursor
	{"idx","Int32",{},{}}, -- which plane to manipulate
	{"use","Int32",{},{}}, -- which basis to use

	{"tri","Int32",{},{}}, -- base of triangles
	{"num","Int32",{},{}}, -- base of numerics
	{"vtx","Int32",{},{}}, -- base of vertices
	{"mat","Int32",{},{}}, -- base of matrices
}
Triangle = {
	{"vtx","Int32",{},{4}}, -- points of triangle
	{"num","Int32",{},{}}, -- plane of points
	{"pol","Int32",{},{}}, -- polytope triangle is in
	{"tex","Int32",{},{}}, -- texture selector
	{"rot","Int32",{},{}}, -- texture rotation
}
Numeric = {
	{"vec","Old",{},{4}}, -- distances above basis
	{"bas","Int32",{},{}}, -- basis selector
	{"pad","Int32",{},{3}},
}
Vertex = {
	{"vec","Old",{},{4}}, -- intersection of planes
	{"ord","Old",{},{4}}, -- coordinate or color
	{"ref","Int32",{},{4}}, -- backreference to planes
}
Vector = {
	{"vec","Old",{},{4}},
}
Matrix = {
	{"mat","Old",{},{16}},
}
Kernel = {
	{"count","Int",{},{}},
	{"comp","Matrix",{},{}},
	{"other","Matrix",{},{}},
	{"self","Matrix",{},{}},
	{"pulse","Matrix",{},{}},
	{"manip","Matrix",{},{}},
	{"copy","Matrix",{},{}},
}
Basis = {
	{"mat","Old",{},{36}},
}
Image = {
	{"dat","Dat",{},{}},
	{"wid","Int",{},{}},
	{"hei","Int",{},{}},
	{"cha","Int",{},{}},
}
Pierce = {
	{"wid","Int32",{},{}},
	{"hei","Int32",{},{}},
	{"idx","Int32",{},{}},
	{"val","Int32",{},{}},
}
Con = {
	{"tag","Constant",{},{}},
	{"mic","Micro",{["tag"]={["MicroCon"]=true}},{}},
	{"mem","Memory",{["tag"]={["MemoryCon"]=true}},{}},
	{"res","Resrc",{["tag"]={["ResrcCon"]=true}},{}},
	{"loc","ResrcLoc",{},{}},
}
Req = {
	{"tag","Request",{},{}},
	{"ptr","Dat",{},{}},
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"ext","Extent",{},{}},
	{"base","Int",{},{}},
	{"size","Int",{},{}},
	{"pre","Int",{},{}},
}
Rsp = {
	{"idx","Int",{},{}}, -- offset into bind->rsp
	{"siz","Int",{},{}}, -- number to unreserve of bind->rsp
}
Draw = {
	{"con","Con",{},{}},
	{"ptr","Dat",{},{}},
	{"siz","Int",{},{}},
	{"arg","Int",{},"siz"},
}
Ins = {
	{"ins","Instr",{},""},
	{"res","Resrc",{},{}},
	{"con","Con",{},{}},
	{"req","Req",{},{}},
	{"rsp","Rsp",{},{}},
	{"idx","Int",{},{}},
}
Center = {
	{"mem","Memory",{},""},
	{"siz","Int",{},{}},
	{"idx","Int",{},{}},
	{"slf","Int",{},{}},
	{"ind","Int32",{["mem"]={["Indexz"]=true}},"siz"},
	{"ver","Vertex",{["mem"]={["Bringupz"]=true}},"siz"},
	{"img","Image",{["mem"]={["Imagez"]=true}},"siz"},
	{"uni","Uniform",{["mem"]={["Uniformz"]=true}},"siz"},
	{"mat","Matrix",{["mem"]={["Matrixz"]=true}},"siz"},
	{"tri","Triangle",{["mem"]={["Trianglez"]=true}},"siz"},
	{"num","Numeric",{["mem"]={["Numericz"]=true}},"siz"},
	{"vtx","Vertex",{["mem"]={["Vertexz"]=true}},"siz"},
	{"bas","Basis",{["mem"]={["Basisz"]=true}},"siz"},
	{"eek","Pierce",{["mem"]={["Imagez"]=true}},"siz"},
	{"oke","Pierce",{["mem"]={["Imagez"]=true}},"siz"},
	{"drw","Draw",{["mem"]={["Drawz"]=true}},"siz"},
	{"com","Ins",{["mem"]={["Instrz"]=true}},"siz"},
	{"str","Str",{["mem"]={["Stringz"]=true}},"siz"},
	{"mch","Machine",{["mem"]={["Machinez"]=true}},"siz"},
	{"ker","Kernel",{["mem"]={["Kernelz"]=true}},"siz"},
	{"cfg","Configure",{["mem"]={["Configurez"]=true}},"siz"},
	{"val","Int",{["mem"]={["Configurez"]=true}},"siz"},
}
Listed = {
	{"siz","Int",{},{}},
	{"idx","Int",{},"siz"},
}
Nested = {
	{"siz","Int",{},{}},
	{"lst","Listed",{},"siz"},
}
Scalar = {
	{"num","Old",{},3},
}
Change = {
	{"cfg","Emerg",{},{}},
	{"vld","Valid",{},{}},
	{"idx","Int",{},{}},
	{"siz","Int",{},{}},
	{"vec","Scalar",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Planes"]=true}},"siz"},
	{"nst","Nested",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Halfs"]=true,}},"siz"},
	{"lst","Listed",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Coins"]=true}},"siz"},
	{"num","Int",{["vld"]={["Toread"]=true,["Towrite"]=true},["cfg"]={["Subsets"]=true}},"siz"},
	{"pnt","Scalar",{["vld"]={["Toread"]=true},["cfg"]={["Points"]=true}},"siz"},
	{"fct","Listed",{["vld"]={["Toread"]=true},["cfg"]={["Facets"]=true}},"siz"},
}
Argument = {
	{"typ","Program",{},""},
	{"inp","Int",{},{}},
	{"out","Int",{},{}},
	{"idx","Int",{},{}},
	{"str","Str",{["typ"]={["Holez"]=true}},{}},
}
Valve = {
	{"tag","Stream",{},""},
	{"siz","Int",{["tag"]={["Fanout"]=true}},{}},
	{"dst","Str",{["tag"]={["Fanout"]=true}},"siz"},
	{"typ","Str",{["tag"]={["Fanout"]=true,["Buffer"]=true,["Execute"]=true}},{}},
	{"str","Str",{["tag"]={["Fanout"]=true,["Buffer"]=true}},{}},
	{"url","Str",{["tag"]={["Execute"]=true}},{}},
	{"arg","Argument",{["tag"]={["Execute"]=true}},1},
	{"exp","Express",{["tag"]={["Combine"]=true}},1},
	{"num","Int",{["tag"]={["Combine"]=true}},{}},
	{"dep","Str",{["tag"]={["Combine"]=true}},"num"},
}
--HERE
-- below for depend.lua
Wrap = {
}
Subtype = {
}
Field = {
}
Type = {
}
-- above for depend.lua
Enums,Enumz = listHere("Enums","type.gen")
Constants,Constantz = listHere("Constants","type.gen")
Structs,Structz = listHere("Structs","type.gen")
function showTypeC(args)
	local result = ""
	result = result.."#include \"face.h\"\n"
	result = result.."#include \"type.h\"\n"
	result = result.."#include <stdlib.h>\n"
	result = result.."#include <string.h>\n"
	result = result.."#include <stdio.h>\n"
	result = result.."#include <unistd.h>\n"
	result = result.."#include <sys/errno.h>\n"
	result = result..showCallC(args).."\n"
	if (not args or args["execWrap"]) then
	result = result.."int execWrap(struct Argument *arg, const char *fork, const char *exec) {\n"
	result = result..showIndent(1).."int idx = openFork();\n"
	result = result..showIndent(1).."if (idx < 0) return -1;\n"
	result = result..showIndent(1).."if (openCheck(idx) >= 0) {\n"
	result = result..showIndent(2).."char *str = 0;\n"
	result = result..showIndent(2).."arg->inp=openRdfd(idx); arg->out=openWrfd(idx);\n"
	result = result..showIndent(2).."showArgument(arg,&str);\n"
	result = result..showIndent(2).."openExec(exec,str); fprintf(stderr,\"%s: cannot execute file: %s\\n\",fork,exec); ERROR();}\n"
	result = result..showIndent(1).."return idx;}\n" end
	if (not args or args["typeWrap"]) then
	result = result.."int typeWrap(enum Program typ, const char *fork, const char *exec) {\n"
	result = result..showIndent(1).."struct Argument arg = {0};\n"
	result = result..showIndent(1).."arg.typ = typ;\n"
	result = result..showIndent(1).."return execWrap(&arg,fork,exec);}\n" end
	if (not args or args["initWrap"]) then
	result = result.."int initWrap(struct Argument *arg, const char *str) {\n"
	result = result..showIndent(1).."int len = 0;\n"
	result = result..showIndent(1).."if (!hideArgument(arg,str,&len)) return -1;\n"
	result = result..showIndent(1).."arg->idx = rdwrInit(arg->inp,arg->out);\n"
	result = result..showIndent(1).."return 0;}\n" end
	if (not args or args["identWrap"]) then
	result = result.."int identWrap(enum Program typ, const char *str) {\n"
	result = result..showIndent(1).."struct Argument arg = {0};\n"
	result = result..showIndent(1).."if (initWrap(&arg,str) < 0 || arg.typ != typ) return -1;\n"
	result = result..showIndent(1).."return arg.idx;}" end
	return result
end
function showTypeH()
	local result = ""
	result = result.."#include \"proto.h\"\n"
	result = result..showCallH().."\n"
	result = result.."int execWrap(struct Argument *arg, const char *fork, const char *exec);\n"
	result = result.."int typeWrap(enum Program typ, const char *fork, const char *exec);\n"
	result = result.."int initWrap(struct Argument *arg, const char *str);"
	result = result.."int identWrap(enum Program typ, const char *str);\n"
	return result
end
function showTypeHs(args)
	local result = ""
	result = result.."module Type where\n"
	result = result.."--\n"
	result = result.."import Face\n"
	result = result.."import System.Environment\n"
	result = result.."import System.IO\n"
	result = result.."import Data.IORef\n"
	result = result.."import Data.Int\n"
	result = result.."import Foreign.C.Types\n"
	result = result.."--\n"
	result = result.."type Dat = [CChar]\n"
	result = result..showCallHs(arg).."\n"
	if (not args or args["Wrap"]) then
	result = result.."execWrap :: Argument -> String -> String -> IO (Maybe Int)\n"
	result = result.."execWrap (Argument (ArgumentA1 typ _ _ idx) arg) fork exec = do\n"
	result = result..showIndent(1).."idx <- openFork\n"
	result = result..showIndent(1).."if idx < 0 then return Nothing else do\n"
	result = result..showIndent(2).."vld <- openCheck idx\n"
	result = result..showIndent(2).."if vld < 0 then return (Just idx) else do\n"
	result = result..showIndent(3).."inp <- openRdfd idx\n"
	result = result..showIndent(3).."out <- openWrfd idx\n"
	result = result..showIndent(3).."ptr <- newIORef \"\"\n"
	result = result..showIndent(3).."showArgument (Argument (ArgumentA1 typ inp out idx) arg) ptr\n"
	result = result..showIndent(3).."str <- readIORef ptr\n"
	result = result..showIndent(3).."openExec exec str\n"
	result = result..showIndent(3).."hPutStrLn stderr (fork ++ \": cannot execute file: \" ++ exec)\n"
	result = result..showIndent(3).."callExit (negate 1)\n"
	result = result..showIndent(3).."return Nothing\n"
	result = result.."typeWrap :: Program -> String -> String -> IO (Maybe Int)\n"
	result = result.."typeWrap typ fork exec = execWrap (Argument (ArgumentA1 typ 0 0 0) ArgumentA5Bs) fork exec\n"
	result = result.."initWrapF :: Maybe Argument -> IO (Maybe Argument)\n"
	result = result.."initWrapF Nothing = return Nothing\n"
	result = result.."initWrapF (Just (Argument (ArgumentA1 typ inp out _) arg)) = do\n"
	result = result..showIndent(1).."idx <- rdwrInit inp out\n"
	result = result..showIndent(1).."return (Just (Argument (ArgumentA1 typ inp out idx) arg))\n"
	result = result.."initWrap :: String -> IO (Maybe Argument)\n"
	result = result.."initWrap str = newIORef str >>= hideArgument >>= initWrapF\n"
	result = result.."identWrapF :: Program -> Maybe Argument -> IO (Maybe Int)\n"
	result = result.."identWrapF _ Nothing = return Nothing\n"
	result = result.."identWrapF cmp (Just (Argument (ArgumentA1 typ _ _ idx) _)) =\n"
	result = result..showIndent(1).."if cmp /= typ then\n"
	result = result..showIndent(1).."return Nothing else\n"
	result = result..showIndent(1).."return (Just idx)\n"
	result = result.."identWrap :: Program -> String -> IO (Maybe Int)\n"
	result = result.."identWrap typ str = initWrap str >>= identWrapF typ\n" end
	return result
end
function showTypeLua()
	local result = ""
	result = result.."require \"luax\"\n"
	result = result.."--\n"
	result = result..showCallLua().."\n"
	result = result.."function execWrap(arg,fork,exec)\n"
	result = result..showIndent(1).."idx = openFork()\n"
	result = result..showIndent(1).."if (idx < 0) then return -1 end\n"
	result = result..showIndent(1).."if (openCheck(idx) >= 0) then\n"
	result = result..showIndent(1).."arg[\"inp\"]=openRdfd(idx); arg[\"out\"]=openWrfd(idx); arg[\"idx\"]=-1\n"
	result = result..showIndent(1).."if (arg[\"typ\"] == nil) then arg[\"typ\"] = \"Programs\"end\n"
	result = result..showIndent(2).."str = showArgument(arg,\"\")\n"
	result = result..showIndent(2).."openExec(exec,str); io.stderr:write(fork..\": cannot execute file: \"..exec..\"\\n\"); os.exit(-1)\n"
	result = result..showIndent(1).."end\n"
	result = result..showIndent(1).."return idx\n"
	result = result.."end\n"
	result = result.."function typeWrap(typ,fork,exec)\n"
	result = result..showIndent(1).."arg[\"typ\"] = typ\n"
	result = result..showIndent(1).."return execWrap(arg,fork,exec)\n"
	result = result.."end\n"
	result = result.."function initWrap(str)\n"
	result = result..showIndent(1).."arg,len = hideArgument(str,0)\n"
	result = result..showIndent(1).."if (arg == nil) then return nil end\n"
	result = result..showIndent(1).."arg[\"idx\"] = rdwrInit(arg[\"inp\"],arg[\"out\"])\n"
	result = result..showIndent(1).."return arg\n"
	result = result.."end\n"
	result = result.."function identWrap(typ,str)\n"
	result = result..showIndent(1).."arg = initWrap(str)\n"
	result = result..showIndent(1).."if (arg == nil) or not (arg[\"typ\"] == typ) then return -1 end\n"
	result = result..showIndent(1).."return arg[\"idx\"]\n"
	result = result.."end"
	return result
end
args = nil
if (arg[2] ~= nil) then
	args = {}
	for line in io.lines(arg[2]) do
		local deps = line
		while (1) do
			local word,rest = string.match(deps," *([%w]+)(.*)")
			if word == nil then break end
			if string.match(word,"..*Type") then args = nil; break end
			if string.match(word,"..*Field") then args = nil; break end
			if string.match(word,"..*Subtype") then args = nil; break end
			args[word] = true
			deps = rest
		end
	end
end
base,ext = string.match(arg[1],"([%w.]*)(%.[%w]*)")
file = io.open(base..ext, "w")
if (base and ext and ext == ".h") then
	file:write(showTypeH().."\n")
end
if (base and ext and ext == ".c") then
	file:write(showTypeC(args).."\n")
end
if (base and ext and ext == ".hs") then
	file:write(showTypeHs(args).."\n")
end
if (base and ext and ext == ".lua") then
	file:write(showTypeLua().."\n")
end
file:close()
